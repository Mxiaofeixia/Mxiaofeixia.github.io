<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[结合hexo在github上搭建个人博客--全过程]]></title>
    <url>%2F2019%2F01%2F05%2F%E7%BB%93%E5%90%88hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E5%85%A8%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[想搭建一个这样的博客，需要哪些步骤呢？ 首先，得在GitHub上有个自己的仓库。 莫嫌我啰嗦，先简单说一下，GitHub是一个什么样的网站。说到GitHub得先说一下git，git是Linux的作者Linus和他的一群以代码会友的小伙伴在创作Linux期间，为了更方便的进行创作而编写的一个分布式（不需要中央服务器，可离线进行）版本控制系统，这其中的故事挺有趣的，有兴趣的小伙伴可以去谷歌一下（大牛们的idea和实现真的都是秒秒钟的事，我什么时候才能有他们十分之一的功力）。git呢，可以帮我们管理记录程序开发过程中的每个版本，打个比方，写毕业论文，昨天写了一段，今天进行了一些修改，只要进行提交，每次修改过后的版本，它都会帮我们保管，并且当我们发现我刚刚的修改不合适，我想回到昨晚提交时的样子时，发现做了好多细节的修改，记不清了，这个时候，git可以帮你秒秒钟回溯到昨晚的那个版本！可穿越到过去，也可以从过去穿越到现在。就是这么神奇！棒呆了有木有 GitHub 是基于 Git 的一个代码托管网站。开发者可以将代码在 GitHub 上开源，可以浏览其它项目的代码，fork 到自己名下做修改，clone 回本地（没有访问权限的 private repo 除外）使用，也可以发起 pull request 向上游提交自己的修改。 来到GitHub官网，注册自己的账号，填好用户名，密码，邮箱，并完成邮箱验证就可以啦！ 注册完之后，就可以在GitHub上新建一个仓库，这个仓库里可以存放你自己的代码和项目（GitHub免费帮你保存哟），可以和其他人分享，向我们这种小菜鸟可以去学习大牛们的项目，包括一些优秀的框架源码。（如果想要有自己的私人库，每月7刀的费用！） 注意，库的名字要和账户名一致！ 默认的域名是http;//username.github.io/,如果想要一个特别的域名，可以买一个域名，并在setting里面绑定就可以了。 以上完成了第一步，我们有自己的代码仓库了，接下来我们要配置本机环境了！ 2. 环境搭建 2.1 首先，我们需要下载node.js和git.安装基本上就是默认安装即可。 安装，完成之后，打开命令窗口（Win+R，输入CMD，回车），分别输入node -v, npm -v, git -version, 如果都能像下图一样返回版本号就说明安装好了。 如果在这里不可以操作git，说明在安装时没有更改路径，设置为windows环境下也可以操作，不过没有关系，只需要将git的安装路径添加到环境变量中就可以在windows下操作，或者我们可以运行git bash，在这里查看git的版本号（安装git之后一定会生成git bash）， 注意，在git bash中应该输入 git version。（环境号版本号不同没有关系） 2.2 SSH授权 打开git bash，输入ssh-keygen -t rsa, 接着回车三下 这样就会在C盘用户目录下生成id_rsa和id_rsa.pub这两个文件，前者是密钥，后者是公钥，用记事本打开id_rsa.pub，复制其中的全部内容，添加到GitHub上，这样本地的id_rsa密钥就可以和GitHub上的id_rsa.pub公钥进行配对，授权成功。 SSH key添加之后，就可以在本机git bash中进行测试，输入ssh -T git@github.com进行测试， 返回Hi username ！You’ve successfully ……说明你已经成功啦！ （如果碰到什么问题，可以给我留言哟！嘻嘻） 3. 设置本地博客的配置 3.1 安装hexo 在任意一个地方新建一个文件夹，在git bash中进入这个文件夹，比如cd /d/Files/hexo/（之后安装的内容会保存在这个文件夹内），输入npm install -g hexo安装hexo即可，如下图（我已经安装过了，就不再安装了） 注意，在回车之后，可能会出现一行WARN的警告语句，不用管它，什么都不要按，等着。。。过一段时间如果出现hexo版本号之类的语句就代表差不多了。 然后输入npm install hexo –save这个时候你会看到命令行出现了一堆白字，紧接着输入hexo v查看是否安装成功 喏，安装好了。。。。 别着急，就快成功了，再坚持一小小下，嘿嘿。 3.2 初始化hexo 继续输入hexo init实现初始化， 下载好了，再输入hexo s 这时候我们就可以打开浏览器了，在地址栏中输入http://localhost:400/，我们就可以看到如下图的界面，，我们的博客建成功啦！！！开不开心？高不高兴？是不是很有成就感？ 我们可以去看一下我们的源码的位置，就在之前新建的那个文件夹里，在source-&gt;_posts文件夹下，有一篇helloworld的初始化文章，如果想要添加新的文章，可以在命令行输入hexo new ‘filename’,就会生成一个新的.md文件，对它编辑就可以了。 ![img](https://images2017.cnblogs.com/blog/1228928/201712/1228928-20171210191722568-2050920108.jpg 3.3 上传项目 先打开配置文档_config.yml，对它做如下修改，repository后面的内容是 **git@gitbub.com:username/库地址** 的形式 注意：type、repository、branch冒号的后面都有一个空格 部署好之后，我们就可以上传我们的代码咯 回到命令行窗口，输入npm install hexo-deployer-git –save, 再输入hexo g，然后再hexo d，就可以将我们public里面的代码上传咯，在GitHub上可以看到我们上传的代码。这样别人也可以通过域名访问我们博客了。在地址栏输入http://域名就可以访问。 ps: 如果觉得对你有帮助的话，麻烦给个赞赞哟！谢谢！]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【持续更新】hexo next主题优化手册]]></title>
    <url>%2F2019%2F01%2F02%2F%E3%80%90%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E3%80%91hexo-next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[hexo常见操作hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo clean #清除部署緩存hexo n == hexo new #新建文章hexo g == hexo generate #生成静态页面至public目录hexo s == hexo server #开启预览访问端口（默认端口4000，可在浏览器输入localhost:4000预览）hexo d == hexo deploy #将.deploy目录部署到GitHubhexo g -d #生成加部署hexo g -s #生成加预览 next主题优化next风格选择next有四种风格,在站点配置文件搜索字段Scheme Settings可以看到， # Scheme Settings # --------------------------------------------------------------- # Schemes #scheme: Muse #scheme: Mist #scheme: Pisces scheme: Gemini 我这里用的是四种：Gemini next菜单设置比如可以看到我的主页有首页、留言、分类、归档、标签等菜单，在站点配置文件下搜索menu:,可以看到 menu: home: / || home about: /about/ || user message: /message/ || comment tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat home就是首页;message就是留言…一开始只有首页和归档,其余的需要我们手动创建，在站点根目录下打开命令行,输入hexo new page &quot;about&quot;并在主题配置文件menu:字段处取消对about的注释重新部署我们就可以看到主页有关于这个菜单了，其他的类似，修改D:\hexoblog\source\about\index.md,就可以修改关于界面了about: /about/ || user中的user是指关于菜单附件的图标用的是图标库里面名为user的图标 添加萌妹子动图在根目录下打开命令行输入npm install --save hexo-helper-live2d 修改站点配置文件(注意不是主题配置文件)在末尾加入: live2d: enable: true scriptFrom: local model: scale: 1 hHeadPos: 0.5 vHeadPos: 0.618 display: superSample: 2 width: 150 height: 300 position: right hOffset: 0 vOffset: -20 mobile: show: false react: opacityDefault: 0.5 opacityOnHover: 0. 实现文章首页”分类于”、”阅读次数”等效果效果图如下: 在根目录下打开命令行依次输入以下命令: npm install hexo-wordcount --save npm uninstall hexo-generator-index --save npm install hexo-generator-index-pin-top --save 打开主题配置文件打开相关开关: post_wordcount: item_text: true wordcount: true min2read: true totalcount: true 打开…/themes/next/layout/_macro/post.swig文件把里面的代码用下面的代码替换:点击下载 打开…/themes/next/languages/zh-Hans.yml文件搜索post字段,添加一行comments: 评论数,注意其余的不要改 设置某篇文章置顶前面的流程走完后,只需要在写文章的时候在文章前面加入top: true或者top: 100(100只是个例子，数字越大越靠前),就能实现置顶效果了 常见错误本地预览和同时发布到远程的浏览结果不一致这是由缓存造成的,需要先hexo clean,再hexo g -d部署到远程 markdown高级语法插入连续多行的代码块按一个tab键,然后贴代码，保证每一行代码前都要额外的tab键,同时最前面空一行。比如,我前面插入的连续行代码的实现效果: 设置文字大小和颜色和居中效果hello,world! hello,world! hello,world! hello,world! hello,world!上面的效果需要在markdwon中的代码是这样的: hello,world! &lt;font color=&quot;#FF0000&quot;&gt; hello,world! &lt;/font&gt; &lt;font size=5&gt; hello,world! &lt;/font&gt; &lt;font size=5 color=&quot;#FF0000&quot;&gt;hello,world! &lt;/font&gt; &lt;center&gt;hello,world!&lt;/center&gt; 插入表格效果图: 左对齐标题 右对齐标题 居中对齐标题 短文本 中等文本 稍微长一点的文本 稍微长一点的文本 短文本 中等文本 markdown代码如下： | 左对齐标题 | 右对齐标题 | 居中对齐标题 | | :------| ------: | :------: | | 短文本 | 中等文本 | 稍微长一点的文本 | | 稍微长一点的文本 | 短文本 | 中等文本 |]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F01%2F02%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
