<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木木的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-11T11:02:49.231Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>煽情小飞侠</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django之应用</title>
    <link href="http://yoursite.com/2019/01/11/Django%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2019/01/11/Django框架/</id>
    <published>2019-01-11T10:22:21.000Z</published>
    <updated>2019-01-11T11:02:49.231Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-什么是Django"><a href="#1-什么是Django" class="headerlink" title="1.什么是Django"></a>1.什么是Django</h5><pre><code>Django是一个开源框架,2005年发布,采用Python语言编写的早期主要是做新闻和内容管理的Django本身提供了非常强大的后台管理系统版本: 2.1.5使用: 1.11.8</code></pre><p>  官网:<a href="http://www.djangoproject.com" target="_blank" rel="noopener">http://www.djangoproject.com</a></p><p>  中文文档:<a href="http://djangobook.py3k.cn/2.0/、" target="_blank" rel="noopener">http://djangobook.py3k.cn/2.0/、</a></p><a id="more"></a>   <h5 id="2-框架模式"><a href="#2-框架模式" class="headerlink" title="2.框架模式"></a>2.框架模式</h5><p>  MTV</p><p>​        M ：Models</p><p>​        T ：Templates</p><pre><code>V ：Views</code></pre><h5 id="3-Django的安装"><a href="#3-Django的安装" class="headerlink" title="3.Django的安装"></a>3.Django的安装</h5><p>  1.查看已安装的Django版本</p><p>​        ①进入到终端以及Python交互模式</p><p>​             交互模式：python3 / ipython3</p><p>​        ②交互模式中输入：import django      </p><p>​         1.如果未报错:当前环境中已经安装django</p><p>​               2.如果报错:没有django</p><p>​        ③查看版本</p><p>​           交互模式中:django.VERSION</p><p>  2.安装Django</p><pre><code>①在线安装</code></pre><p>​               pip3 : 安装到python3下</p><p>​             pip : 安装到python2下</p><p>​       sudo pip3 install django  (默认安装Django的最新版本)</p><p>​       sudo pip3 install django==1.11.8 (指定安装Django的1.11.8)</p><p>​        ②离线安装</p><p>​               1.下载安装包</p><p>​               2.sudo pip3 install Django-1.11.8.tar.gz</p><p><strong>4.Django框架的使用</strong></p><p>  1.创建Django项目</p><p>​    使用 django-admin 创建Django项目</p><p>​    语法: django-admin startproject 项目名(终端输入)</p><p>  2.Django项目的结构介绍</p><pre><code>①manage.py</code></pre><p>​             包含执行django中的各项操作的指令(子命令)</p><p>​        如:</p><p>​          启动服务 : runserver (例：python3 manage.py runserver)</p><p>​          创建应用 :start</p><p>​          创建后台管理员 : </p><p>​          …. ….</p><pre><code>②主目录(与项目名称一致的目录)</code></pre><p>​              1.<strong>init</strong>.py   初始化文件,服务启动时自动运行</p><p>​              2.urls.py   项目的基础url配置文件(基础的路由配置)</p><p>​              3.wsgi.py  （Web Server Gateway Interface）</p><p>​              Web 服务 网关 接口的配置文件，部署项目时使用</p><p>​              4.settings.py   项目的主配置文件,启动服务器时自动运行</p><p>​                1.BASE_DIR : 获取当前项目的绝对路径</p><p>​                2.DEBUG : 是否启用调试模式</p><p>​                  True : 启动调试模式(开发环境中使用)</p><p>​                  False : 不启用调试(生产环境中使用)</p><p>​                3.ALLOWED_HOSTS    设置允许访问到本项目的地址列表</p><p>​                      ①如果为空的话,表示只有本机(127.0.0.1/localhost)才能访问    </p><p>​                      ②[‘*’],表示任何能够表示该机器的地址都能够访问到当前项目</p><p>​                        (127.0.0.1/localhost  /  0.0.0.0  /  IP地址都可以)</p><p>​                 注意： 如果允许在局域网内被其他机器访问的话:</p><p>​                    如果允许被其他机器访问的话,启动服务时必须使用以下方式:</p><p>​                  ./manage.py runserver 0.0.0.0:端口号</p><p>​                4.INSTALLED_APPS  指定已安装的应用,如果有自定义应用的话,必须要在此注册</p><p>​                5.MIDDLEWARE   指定中间件信息</p><p>​                6.TEMPLATES   指定模板配置</p><p>​                7.DATABASES  指定数据库配置</p><p>​                8.LANGUAGE_CODE  语言设置,如果需要中文的话,允许更改为 zh-Hans</p><p>​                9.TIME_ZONE  指定时区,如果指定中国时区的话,允许更改为 “Asia/Shanghai”</p><p><strong>5.URL的使用</strong></p><p>  1.urls.py</p><p>​    主路由配置文件,默认在主目录中</p><p>​    包含最基本的地址映射</p><p>​    作用:通过urls.py中定义好的地址找到对应的视图处理函数</p><p>​    （在urlpatterns中，通过若干url()来表示具体的路由-视图映射关系）</p><p>​        from django.conf.urls import url</p><p>​        from django.contrib import admin</p><p>​        urlpatterns = [</p><p>​          url(r’^admin/‘,admin.site.urls),</p><p>​        ]</p><p>  2.url() 的语法规范</p><p>​    作用:匹配用户的访问路径,交给对应的视图处理程序</p><p>​    语法:</p><p>​      from django.conf.urls import url</p><p>​      url(regex,views,kwargs=None,name=None)</p><p>​       ①regex : 允许是正则表达式,匹配请求的url</p><p>​        ②views : 对应的视图处理函数名</p><p>​        ③kwargs : 字典,用来向views传参</p><p>​        ④name : 为 url 起别名,在地址反向解析时使用</p><p>  3.通过 url 向视图传参</p><p>​    <a href="http://localhost:8000/show/2018" target="_blank" rel="noopener">http://localhost:8000/show/2018</a></p><p>​    <a href="http://localhost:8000/show/2015" target="_blank" rel="noopener">http://localhost:8000/show/2015</a></p><p>​    <a href="http://lcoalhost:8000/show/2017" target="_blank" rel="noopener">http://lcoalhost:8000/show/2017</a></p><p>​    ①使用正则表达式传参</p><p>​      使用正则表达式的子组传参 - (),一个子组就是一个参数,多个参数的话要使用多个子组表示,并且中间使用 / 隔开</p><p>​      # 当访问路径时 /show/四位数字/ 的时候</p><p>​          在 urls.py 中</p><p>​          url(r’^show/(\d{4})/$’,show1_views),</p><p>​          在views.py中</p><p>​          def show1_views(request,year):</p><p>​            pass</p><p>​    ②通过 kwargs 参数传参</p><p>​          dic = {</p><p>​            ‘name’:’wangwc’,</p><p>​            ‘age’:18</p><p>​            }</p><p>​          url(r’^show/$’,show3_views,dic)</p><p>​          def show3_views(request,name,age):</p><p>​            pass</p><h5 id="6-Django-中的应用"><a href="#6-Django-中的应用" class="headerlink" title="6.Django 中的应用"></a>6.Django 中的应用</h5><p>​    1.什么是应用</p><p>​     应用就是网站中的一个独立的程序模块</p><p>​     在Django中,主目录一般不处理用户的具体请求,主目录主要做项目的初始化配置以及请求的分发</p><p>​     (分布式请求处理),具体的请求是由各个应用去处理的</p><p>​    2.创建应用</p><p>​        ①manage.py 指令创建</p><p>​          ./manage.py startapp 应用名称</p><p>​      ex:</p><p>​        ./manage.py startapp news</p><p>​        ②在 settings.py 中进行注册</p><p>​          在 INSTALLED_APPS 中追加应用名称即可</p><p>​          INSTALLED_APPS = [</p><p>​            …. ….,</p><p>​            ‘应用名称’,</p><p>​             ]</p><p>​    3.应用的结构组成</p><p>​        ①migrations  文件夹存放数据库的中间文件与模型相关</p><pre><code>②.__init__.py   应用的初始化文件</code></pre><p>​        ③admin.py   应用的后台管理配置文件</p><p>​        ④app.py   应用的属性配置文件</p><p>​          ⑤models.py    模型的映射文件</p><pre><code>⑥tests.py    应用的单元测试文件⑦views.py   定义视图处理函数的文件</code></pre><p>​      </p><p>​    4.分布式的路由系统 (请求地址分发)</p><p>​    在每个应用中创建 urls.py 结构参考主目录的 urls.py</p><p>   当访问路径是 <a href="http://localhost:8000/music/xxx" target="_blank" rel="noopener">http://localhost:8000/music/xxx</a></p><p>​    则交给music的urls做进一步处理</p><p>​    当访问路径是 <a href="http://localhost:8000/sport/xxx" target="_blank" rel="noopener">http://localhost:8000/sport/xxx</a></p><p>​    则交给sport的urls做进一步处理</p><p>​    当访问路径是 <a href="http://localhost:8000/sport/index" target="_blank" rel="noopener">http://localhost:8000/sport/index</a></p><p>​    则交给 sprot 应用中的 urls 找到 index 视图处理函数</p><p>​    当访问路径是 <a href="http://localhost:8000/news/index" target="_blank" rel="noopener">http://localhost:8000/news/index</a></p><p>​    则交给 news 应用中的 urls 找到 index 视图处理函数</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-什么是Django&quot;&gt;&lt;a href=&quot;#1-什么是Django&quot; class=&quot;headerlink&quot; title=&quot;1.什么是Django&quot;&gt;&lt;/a&gt;1.什么是Django&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;Django是一个开源框架,2005年发布,采用Python语言编写的

早期主要是做新闻和内容管理的

Django本身提供了非常强大的后台管理系统

版本: 2.1.5

使用: 1.11.8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  官网:&lt;a href=&quot;http://www.djangoproject.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.djangoproject.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  中文文档:&lt;a href=&quot;http://djangobook.py3k.cn/2.0/、&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://djangobook.py3k.cn/2.0/、&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python Web" scheme="http://yoursite.com/categories/Python-Web/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>AJAX（python）框架</title>
    <link href="http://yoursite.com/2019/01/08/AJAX%EF%BC%88python%EF%BC%89%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2019/01/08/AJAX（python）框架/</id>
    <published>2019-01-08T11:20:54.000Z</published>
    <updated>2019-01-08T11:28:32.438Z</updated>
    
    <content type="html"><![CDATA[<p>1.什么是AJAX</p><p>  Asynchronous Javascript And Xml</p><p>​                异步的        JS         和  xml</p><p>  xml : eXtensible Markup Language</p><p>​    早期是做 前后端数据交互格式</p><p>​    由于结构繁琐,后来就被抛弃了 …,被JSON所取代</p><p>AJAX:通过 JS 异步的向服务器发送请求并接受响应数据,响应数据的格式原来是xml,后来变成了JSON</p><p>同步请求:当客户端向服务器发送请求时,服务器在处理的过程中,浏览器只能等待,效率较低</p><p>异步请求:当客户端向服务器发送请求时,服务器在处理的过程中,浏览器可以做其他的操作,不需要一直等待</p><a id="more"></a>   <p>  AJAX的优点:</p><p>​    1.异步 访问</p><p>​    2.局部 刷新</p><h5 id="AJAX的使用场合"><a href="#AJAX的使用场合" class="headerlink" title="AJAX的使用场合:"></a>AJAX的使用场合:</h5><p>​    1.搜索建议</p><p>​    2.表单验证</p><p>​    3.前后端完全分离时使用</p><h5 id="2-AJAX核心对象-异步对象-XMLHttpRequest"><a href="#2-AJAX核心对象-异步对象-XMLHttpRequest" class="headerlink" title="2.AJAX核心对象 - 异步对象(XMLHttpRequest)"></a>2.AJAX核心对象 - 异步对象(XMLHttpRequest)</h5><p>  1.什么是XMLHttpRequest</p><p>​    简称为 xhr</p><p>​    称为 “异步对象” 代替浏览器向服务器发送异步的请求并接收响应</p><p>  2.创建异步对象</p><p>​    主流的异步对象是 XMLHttpRequest 类型的.并且所有主流浏览器(IE7+,Chrome,Firefox,Safari,Opera)也都支持 XMLHttpRequest.但在IE低版本浏览器(IE7以及以下),就不支持XMLHttpRequest,需要使用 ActiveXObject() 来创建异步对象</p><p>​    如果支持 XMLHttpRequest</p><p>​      var xhr = new XMLHttpRequest()</p><p>​    如果不支持 XMLHttpRequest</p><p>​      var xhr = new ActiveXObject(“Microsoft.XMLHTTP”)</p><p>​    练习: 根据不同的浏览器创建 xhr 并返回</p><p>​    1.创建函数 - createXhr()</p><p>​    2.在函数体内,判断浏览器对xhr的支持性,创建不同的xhr,并返回</p><p>​    3.创建一个按钮,调用createXhr() 得到返回值,并输出在console上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#run.py</span><br><span class="line">from flask import Flask, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">@app.route(&apos;/02-server&apos;)</span><br><span class="line">def server02_views():</span><br><span class="line">    return &quot;这是我的第一个ajax的响应&quot;</span><br><span class="line">@app.route(&apos;/03-server&apos;)</span><br><span class="line">def server03_views():</span><br><span class="line">    #接收前端传递过来的数据</span><br><span class="line">    uname=request.args[&apos;uname&apos;]</span><br><span class="line">    return &quot;欢迎:&quot;+uname</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run(debug=True)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#01-xhr.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function createXhr()&#123;</span><br><span class="line">          var xhr = null;</span><br><span class="line">          //判断浏览器对xhr的支持性</span><br><span class="line">          if(window.XMLHttpRequest)&#123;</span><br><span class="line">            xhr = new XMLHttpRequest();</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">            xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">          return xhr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function testXhr()&#123;</span><br><span class="line">          var xhr = createXhr();</span><br><span class="line">          console.log(xhr);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button onclick=&quot;testXhr()&quot;&gt;创建异步对象&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#02-ajaxget.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;</span><br><span class="line">        &lt;a href=&quot;/02-server&quot;&gt;去往/02-server&lt;/a&gt;</span><br><span class="line">    &lt;/h2&gt;</span><br><span class="line">    &lt;button onclick=&quot;btnAjax()&quot;&gt;使用AJAX发送请求&lt;/button&gt;</span><br><span class="line">    &lt;h2 id=&quot;show&quot;&gt;&lt;/h2&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function createXhr()&#123;</span><br><span class="line">          var xhr = null;</span><br><span class="line">          //判断浏览器对xhr的支持性</span><br><span class="line">          if(window.XMLHttpRequest)&#123;</span><br><span class="line">            xhr = new XMLHttpRequest();</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">            xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">          return xhr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function btnAjax()&#123;</span><br><span class="line">          //1.创建xhr对象</span><br><span class="line">          var xhr = createXhr();</span><br><span class="line">          //2.创建请求</span><br><span class="line">//          xhr.open(&apos;get&apos;,&apos;/02-server&apos;,true);</span><br><span class="line">          xhr.open(&apos;get&apos;,&apos;/03-server?uname=wangwc&apos;,true);</span><br><span class="line">          //3.设置回调函数</span><br><span class="line">          xhr.onreadystatechange=function()&#123;</span><br><span class="line">            //判断readyState是否为4并且status是否为200</span><br><span class="line">            //如果以上条件达成，则可以接收响应数据</span><br><span class="line">            if(xhr.readyState==4&amp;&amp;xhr.status==200)&#123;</span><br><span class="line">                //接收响应数据</span><br><span class="line">                var resText=xhr.responseText;</span><br><span class="line">                //将resText放在#show中显示</span><br><span class="line">                document.getElementById(&quot;show&quot;).innerHTML=resText;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          //4.发送请求</span><br><span class="line">          xhr.send(null);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="3-xhr-的成员-重点"><a href="#3-xhr-的成员-重点" class="headerlink" title="3.xhr 的成员   (重点)"></a><strong>3.xhr 的成员   (重点)</strong></h4><p>​    1.方法 - open()</p><p>​      作用:创建请求</p><p>​      语法:open(method,url,async)</p><p>​        method:请求方式,取值 ‘get’ 或 ‘post’</p><p>​        url:请求地址,字符串</p><p>​        async:是否采用异步的方式发送请求</p><p>​          true:异步请求</p><p>​          false:同步请求</p><p>​      ex:</p><p>​        xhr.open(‘get’,’/server’,true);</p><p>​    <strong>2.属性 - readyState</strong></p><p>​      作用:请求状态,通过不同的请求状态值来表示xhr与服务器的交互情况</p><p>​        由 0-4 共 5 个值表示5个不同的状态</p><p>​        0 : 请求尚未初始化</p><p>​        1 : xhr已经与服务器建立连接</p><p>​        2 : 服务器端已经接收请求</p><p>​        3 : 请求正在处理中</p><p>​        4 : 响应已经完成</p><p>​    <strong>3.属性 - status</strong></p><p>​      作用:服务器端的响应状态码</p><p>​      200 : 表示服务器已经正确处理请求并给出响应</p><p>​      404 : 请求资源不存在</p><p>​      500 : 服务器内部错误</p><p>​    4.属性 - responseText</p><p>​      作用 : 接收服务器端响应回来的数据</p><p>​    5.事件 - onreadystatechange</p><p>​      作用 : 每当 xhr 的 readyState 值发生改变的时候都要触发的行为操作 - 回调函数</p><p>​        关注:</p><p>​          1.xhr 的 readyState 是否为 4</p><p>​          2.xhr 的 status 是否为 200</p><p>​          如果以上两点同时满足的话,则可以接收响应数据(responseText)</p><p>​      ex:为 xhr 绑定 onreadystatechange 事件</p><p>​        xhr.onreadystatechange = function(){</p><p>​          if(xhr.readyState==4&amp;&amp;xhr.status==200){</p><p>​            console.log(xhr.responseText);</p><p>​          }</p><p>​        }</p><p>​    6.方法 - send()</p><p>​      作用:通知 xhr 开始向服务器发送请求</p><p>​      语法:xhr.send(body)</p><p>​        body:是请求体</p><p>​        get : body的值为 null</p><p>​          xhr.send(null)</p><p>​        post: body的值为具体请求提交的数据</p><p>​          xhr.send(“请求数据”)</p><h4 id="4-AJAX的操作步骤"><a href="#4-AJAX的操作步骤" class="headerlink" title="4.AJAX的操作步骤"></a>4.AJAX的操作步骤</h4><p>​    1.GET 请求</p><p>​      1.创建 xhr 对象</p><p>​      2.创建请求 - open()</p><p>​      3.设置回调函数 - onreadystatechange</p><p>​        判断状态,接收响应,业务处理</p><p>​      4.发送请求 - send()</p><p>​        xhr.send(null)</p><p>1.AJAX 发送 post 请求</p><p>  1.请求数据要放在send()提交的</p><p>​    var xhr = createXhr();</p><p>​    xhr.open(“post”,”xxx”,true)</p><p>​    xhr.onreadystatechange = function(){</p><p>​      xxxx  xxxx</p><p>​    }</p><p>​    xhr.send(“uname=wangwc&amp;uage=35”);                            </p><p>  2.Content-Type 的问题</p><p>​    AJAX的post请求,默认会将Content-Type消息头的值更改为 “text/plain” , 所以导致提交参数无法获取. </p><p>​    解决方案:将Content-Type的值更改为 “application/x-www-form-urlencoded” 即可</p><p>​    xhr.setRequestHeader(“Content-Type”,”application/x-www-form-urlencoded”);</p><p>​    注意：需要放在create后，send前.</p><p>2.JSON</p><p>  1.JSON介绍</p><p>​    JSON : JavaScript Object Notation</p><p>​           JS         对象   表现形式</p><p>​    将复杂结构的字符串转换成JS对象的表现形式,方便前端解析</p><p>  <strong>2.JSON的表现</strong></p><p>​    1.JSON表示单个对象</p><p>​      1.使用{}表示一个对象</p><p>​      2.在{}中使用key:value的形式来表示属性(数据)</p><p>​      3.key必须使用””引起来</p><p>​      4.value如果是字符串的话,也必须使用””引起来</p><p>​      5.多对 key:value之间使用,隔开</p><p>​      var obj = {</p><p>​        “name”:”王老师”,</p><p>​        “age”:30,</p><p>​        “gender”:”男”</p><p>​      }</p><p>​    取值：对象名.属性</p><p>​    console.log(obj.name)</p><p>​    2.使用JSON表示一个数组</p><p>​      1.使用[]来表示一个数组</p><p>​      2.数组中允许包含若干字符串 或 JS对象</p><p>​        1.使用JSON数组来表示若干字符串</p><p>​          var arr = [“王老师”,”王夫人”,”王小超”];</p><p>​        2.使用JSON数组来表示若干对象</p><p>​          通过一个数组保存3个人的信息(name,age,gender)</p><p>​          var arr = [</p><p>​            {</p><p>​              “name”:”王老师”,</p><p>​              “age”:35,</p><p>​              “gender”:”男”</p><p>​            },</p><p>​            {</p><p>​              “name”:”王夫人”,</p><p>​              “age”:40,</p><p>​              “gender”:”男”</p><p>​            },</p><p>​            {</p><p>​              “name”:”王小超”,</p><p>​              “age”:12,</p><p>​              “gender”:”男”</p><p>​            }</p><p>​          ];</p><p>  3.使用 jq 循环遍历数组</p><p>​    1.$arr.each();</p><p>​      $arr : jQuery中的数组</p><p>​      语法:</p><p>​        $arr.each(function(i,obj){</p><p>​          i : 遍历出来的元素的下标</p><p>​          obj : 遍历出来的元素</p><p>​        });</p><p>​    2.$.each()</p><p>​      $ -&gt; jQuery</p><p>​      语法:$.each(arr,function(i,obj){</p><p>​      });</p><p>  <strong>4.后台处理JSON</strong></p><p>​    1.前后端 JSON 的处理流程</p><p>​      1.在后端先查询出/得到复杂结构的数据</p><p>​      2.在后端将复杂结构的数据转换成符合JSON格式的字符串</p><p>​      3.在后端将JSON格式的字符串响应给前端</p><p>​      4.在前端将JSON格式的字符串再转换为JS对象/数组</p><p>​      5.在前端对JS对象/数组 进行循环遍历/取值操作</p><p>​    <strong>2.Python中的JSON处理</strong></p><p>​      在Python中可以使用 json 类完成JSON的转换</p><p>​      import json</p><p>​      jsonStr = json.dumps(元组|列表|字典)</p><p>​      return jsonStr</p><p>​    注意:列表，元组，字典中的内容也必须是JSON可序列化的内容才可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#注意：</span><br><span class="line">users=User.query.all()</span><br><span class="line">    list=[]</span><br><span class="line">    for user in users:</span><br><span class="line">        list.append(user.to_dict())</span><br><span class="line">        return json.dumps(list)</span><br></pre></td></tr></table></figure><p>​    <strong>3.前端中的JSON处理</strong> </p><p>​      由于服务器端响应回来的数据时String,所以在前端对复杂结构的数据必须先转换成JS对象或数组,然后再取值或循环遍历</p><p>​        在 JS 中 :</p><p>​        var js对象 = JSON.parse(JSON字符串)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script src=&quot;js/common.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/jquery-1.11.3.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">            $(&quot;#btnShow&quot;).click(function () &#123;</span><br><span class="line">                var xhr=createXhr();</span><br><span class="line">                xhr.open(&apos;get&apos;,&apos;/04-json&apos;,true);</span><br><span class="line">                if(xhr.readyState==4&amp;&amp;xhr.status==200) &#123;</span><br><span class="line">                    var res = xhr.responseText;</span><br><span class="line"></span><br><span class="line">                    res = JSON.parse(res);</span><br><span class="line">                    console.log(typeof(res));</span><br><span class="line">                    console.log(res);</span><br><span class="line"></span><br><span class="line">                    $each(res, function (i, obj) &#123;</span><br><span class="line">                        console.log(&apos;id:&apos; + obj.id)</span><br><span class="line">                        console.log(&apos;uname:&apos; + obj.uname)</span><br><span class="line">                        console.log(&apos;nickname:&apos; + obj.nickname)</span><br><span class="line">                    &#125;);</span><br><span class="line">                </span><br><span class="line">                &#125;</span><br><span class="line">                xhr.send(null)</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=&quot;btnShow&quot;&gt;显示&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="1-使用-jquery-操作-AJAX"><a href="#1-使用-jquery-操作-AJAX" class="headerlink" title="1.使用 jquery 操作 AJAX"></a>1.使用 jquery 操作 AJAX</h3><h5 id="1-obj-load-url-data-callback"><a href="#1-obj-load-url-data-callback" class="headerlink" title="1.$obj.load(url[,data][,callback])"></a>1.$obj.load(url[,data][,callback])</h5><p>​    作用:远程加载数据并加载到$obj元素中</p><p>​    url : 远程请求的地址</p><p>​    data : 要传递的参数</p><p>​      1.字符串拼参数,采用 get 方式发送请求</p><p>​         var params=”name=zsf&amp;age=80”</p><p>​       2.使用 JSON 格式拼参数,采用 post 方式发送请求</p><p>​            var params={</p><p>​                    “name”:’基尼’,</p><p>​                    “age”:”85”</p><p>​                }</p><p>​    callback : 请求和响应完成之后的回调函数</p><p>​      function(resText,statusText){</p><p>​        resText : 响应回来的文本</p><p>​        statusText : 响应回来的状态文本</p><p>​      }</p><h5 id="2-get-url-data-callback-type"><a href="#2-get-url-data-callback-type" class="headerlink" title="2.$.get(url[,data][,callback][,type])"></a>2.$.get(url[,data][,callback][,type])</h5><p>​    作用:使用 get 方式异步的向服务器发送请求</p><p>​    url : 远程请求的地址</p><p>​    data : 请求参数 (可选)</p><p>​    callback : 响应成功后的回调函数(可选)</p><p>​      function(resText){</p><p>​        resText : 表示响应回来的数据</p><p>​      }</p><p>​    type : 响应回来的数据的数据类型</p><p>​      1.html : 响应回来的文本当成HTML文本处理</p><p>​      2.text : 响应回来的文本当成text文本处理</p><p>​      3.json : 响应回来的文本当成JSON进行处理(转换成JS对象)</p><p>​      4.script : 响应回来的是JS的代码片段</p><h5 id=""><a href="#" class="headerlink" title=" "></a> </h5><h5 id="3-post-url-data-callback-type"><a href="#3-post-url-data-callback-type" class="headerlink" title="3.$.post(url[,data][,callback][,type])"></a>3.$.post(url[,data][,callback][,type])</h5><p>​    各参数作用同 $.get </p><h5 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h5><h5 id="4-ajax"><a href="#4-ajax" class="headerlink" title="4.$.ajax()"></a>4.$.ajax()</h5><p>​    语法：$.ajax({ SETTINGS });</p><p>​    SETTINGS中的常用设置选项</p><p>​        1. url ：字符串，表示请求的地址</p><p>​        2. type : 字符串，请求方式，’get’ 或 ‘post’</p><p>​        3.async : Boolean,是否采用异步方式发送请求</p><p>​        4.data ： 要传递到服务器的参数</p><p>​            ①字符串</p><p>​              “name1=value1&amp;name2=value2”</p><p>​            ②JSON / Map</p><p>​                {</p><p>​                “name1”:”value1”,</p><p>​                “name2”:”value2”</p><p>​                }</p><p>​        5.dataType : 字符串，响应回来的数据格式</p><p>​            html,xml,text,script,json</p><p>​            jsonp : 跨域时候使用</p><p>​        6.sucess : 请求成功时的回调函数</p><p>​             function(data){</p><p>​                data : 是响应回来的数据</p><p>​            }</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//向 /05-ajax 发送一个同步请求，并接收响应数据，响应回来的内容是一个JSON字符串</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url:&apos;/05-ajax&apos;,</span><br><span class="line">    type:&apos;get&apos;,</span><br><span class="line">    dataType:&apos;json&apos;,</span><br><span class="line">    async:false,</span><br><span class="line">    success:function(data)&#123;</span><br><span class="line">        data就是响应回来的数据</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.什么是AJAX&lt;/p&gt;
&lt;p&gt;  Asynchronous Javascript And Xml&lt;/p&gt;
&lt;p&gt;​                异步的        JS         和  xml&lt;/p&gt;
&lt;p&gt;  xml : eXtensible Markup Language&lt;/p&gt;
&lt;p&gt;​    早期是做 前后端数据交互格式&lt;/p&gt;
&lt;p&gt;​    由于结构繁琐,后来就被抛弃了 …,被JSON所取代&lt;/p&gt;
&lt;p&gt;AJAX:通过 JS 异步的向服务器发送请求并接受响应数据,响应数据的格式原来是xml,后来变成了JSON&lt;/p&gt;
&lt;p&gt;同步请求:当客户端向服务器发送请求时,服务器在处理的过程中,浏览器只能等待,效率较低&lt;/p&gt;
&lt;p&gt;异步请求:当客户端向服务器发送请求时,服务器在处理的过程中,浏览器可以做其他的操作,不需要一直等待&lt;/p&gt;
    
    </summary>
    
      <category term="Python Web" scheme="http://yoursite.com/categories/Python-Web/"/>
    
    
      <category term="AJAX" scheme="http://yoursite.com/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>高阶函数</title>
    <link href="http://yoursite.com/2019/01/07/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/01/07/高阶函数/</id>
    <published>2019-01-07T11:08:12.000Z</published>
    <updated>2019-01-07T11:26:27.622Z</updated>
    
    <content type="html"><![CDATA[<h4 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h4><p>​    函数式编程是指用一系列函数解决问题 ; 函数是一等公民</p><p>   说明:</p><p>​    用每一个函数完成细小的功能,一系列函数的任意组成可以解决大问题</p><p>​    函数仅接受输入并产生输出,不包含任何可能影响输出的内部状态</p><h5 id="函数的可重入性"><a href="#函数的可重入性" class="headerlink" title="函数的可重入性:"></a>函数的可重入性:</h5><p>  当一个函数没有访问除局部变量以外的变量,则此函数为可重入函数</p><a id="more"></a>   <p>​    </p><h4 id="高阶函数-High-Order-Function"><a href="#高阶函数-High-Order-Function" class="headerlink" title="高阶函数 High Order Function"></a>高阶函数 High Order Function</h4><p>  什么是高阶函数</p><p>​    满足下列条件中一个的函数即为高阶函数</p><p>​      函数接受一个或多个函数作为参数传入</p><p>​      函数返回一个函数</p><p>python 内建的高阶函数</p><p>  map, filter, sorted</p><h5 id="map-函数"><a href="#map-函数" class="headerlink" title="map 函数:"></a>map 函数:</h5><p>  map(func, *iterables)  返回可迭代对象,此可迭代对象用func对可迭代对象iterables中的每个元素作为参数计算后得到结果,再返回.当最短的一个可迭代对象不再提供数据时迭代结束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">def power2(x):</span><br><span class="line">    # print(&quot;power2被调用, x=&quot;, x)</span><br><span class="line">    return x ** 2</span><br><span class="line"></span><br><span class="line"># 生成一个可迭代对象,此可迭代对象可以生成 1~9的自然数的平方</span><br><span class="line">for x in map(power2, range(1, 10)):</span><br><span class="line">    print(x)  # 1, 4, 9, 16</span><br><span class="line"></span><br><span class="line"># 生成一个可迭代对象,此可迭代对象可以生成 </span><br><span class="line">#   1**4, 2**3, 3**2, 4**1</span><br><span class="line"># pow(x, y, z=None)</span><br><span class="line"></span><br><span class="line">for x in map(pow, range(1, 5),</span><br><span class="line">             range(4, 0, -1)):</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">print(&apos;-----------------&apos;)</span><br><span class="line">for x in map(pow, [1, 2, 3, 4],</span><br><span class="line">                  [4, 3, 2, 1],</span><br><span class="line">                  range(5, 100)):</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><p>练习:</p><p>  求: 1<strong>2 + 2</strong>2 + 3<strong>2 + … + 9</strong>2的和</p><p>  求: 1<strong>3 + 2</strong>3 + 3<strong>3 + … + 9</strong>3的和</p><p>  求: 1<strong>9 + 2</strong>8 + 3<strong>7 + … + 9</strong>1的和 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 求: 1**2 + 2**2 + 3**2 + ... + 9**2的和</span><br><span class="line">def power2(x):</span><br><span class="line">    return x ** 2</span><br><span class="line"># 方法1</span><br><span class="line"># s = 0</span><br><span class="line"># for x in map(power2, range(1, 10)):</span><br><span class="line">#     s += x</span><br><span class="line"># print(s)</span><br><span class="line"># 方法2</span><br><span class="line"># m = map(power2, range(1, 10))</span><br><span class="line"># print(sum(m))</span><br><span class="line"># 方法3</span><br><span class="line">print(sum(map(power2, range(1, 10))))</span><br><span class="line"></span><br><span class="line"># 求: 1**3 + 2**3 + 3**3 + ... + 9**3的和</span><br><span class="line">print(sum(map(lambda x:x**3, range(1, 10))))</span><br><span class="line"></span><br><span class="line"># 求: 1**9 + 2**8 + 3**7 + ... + 9**1的和</span><br><span class="line">print(sum(map(pow,</span><br><span class="line">              range(1, 10),</span><br><span class="line">              range(9, 0, -1))))</span><br></pre></td></tr></table></figure><h5 id="filter函数"><a href="#filter函数" class="headerlink" title="filter函数"></a>filter函数</h5><p>  filter(func, iterable)  返回一个可迭代对象,此可迭代对象将对iterable获取到的数据用函数func进行筛选; func将对iterable中的每个元素进行求值，返回False则丢弃，返回True则保留此数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 判断x是否是奇数，如果是奇数返回True,否则...</span><br><span class="line">def isodd(x):</span><br><span class="line">    return x % 2 == 1</span><br><span class="line"></span><br><span class="line"># 生成1~100的奇数</span><br><span class="line">for x in filter(isodd, range(100)):</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line"># 生成1~100以内的偶数放到列表even中</span><br><span class="line">even = [x for x in filter(</span><br><span class="line">    lambda x: x % 2 == 0,</span><br><span class="line">    range(1, 100)</span><br><span class="line">)]</span><br><span class="line">print(even)</span><br></pre></td></tr></table></figure><p>练习:</p><ol><li>把1～１００之间的全部素数放在列表primes中</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def isprime(x):</span><br><span class="line">    if x &lt; 2:</span><br><span class="line">        return False</span><br><span class="line">    for i in range(2, x):</span><br><span class="line">        if x % i == 0:</span><br><span class="line">            return False</span><br><span class="line">    return True</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">primes = [x for x in filter(</span><br><span class="line">    isprime,</span><br><span class="line">    range(100)</span><br><span class="line">)]</span><br><span class="line"></span><br><span class="line">print(primes)</span><br></pre></td></tr></table></figure><h5 id="sorted-函数"><a href="#sorted-函数" class="headerlink" title="sorted 函数:"></a>sorted 函数:</h5><p>  作用：</p><p>  　将原可迭代对象的数据进行排序，生成排序后的列表</p><p>  格式:</p><p>​    sorted(iterble, key=None, reverse=False)</p><p>  说明:</p><p>​    iterable 是可迭代对象</p><p>​    key 函数是用来提供比较值的函数，这个值将作用排序的依据</p><p>​    reverse 标志用来设置是否降序排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意sorted函数的用法</span><br><span class="line">L = [5, -2, -4, 0, 3, 1]</span><br><span class="line">L2 = sorted(L)  # [-4, -2, 0, 1, 3, 5]</span><br><span class="line">print(&apos;L2=&apos;, L2)</span><br><span class="line">L3 = sorted(L, reverse=True)</span><br><span class="line">print(&quot;L3=&quot;, L3) # [5, 3, 1, 0, -2, 4]</span><br><span class="line"></span><br><span class="line">L4 = sorted(L, key=abs) # [0, 1, -2, 3, -4, 5]</span><br><span class="line">print(L4)</span><br><span class="line"></span><br><span class="line">names = [&apos;Tom&apos;, &apos;Jerry&apos;, &apos;Spike&apos;, &apos;Tyke&apos;]</span><br><span class="line">L5 = sorted(names, key=len)</span><br><span class="line">print(L5) #[&apos;Tom&apos;,&apos;Tyke&apos;,&apos;Jerry&apos;,&apos;Spike&apos;]          #   3      4       5      5</span><br><span class="line">L6 = sorted(names)  # ???</span><br><span class="line">print(&apos;L6=&apos;, L6)</span><br></pre></td></tr></table></figure><p>练习:</p><p>names = [‘Tom’, ‘Jerry’, ‘Spike’, ‘Tyke’]</p><p>排序的依据是’moT’  ‘yrreJ’, ‘ekipS’ ‘ekyT’</p><p>结果是:</p><p>​    [‘Spike’, ‘Tyke’, ‘Tom’, ‘Jerry’]</p><p>​    (注:如果没有现成的函数可用,需要自己写函数)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">names = [&apos;Tom&apos;, &apos;Jerry&apos;, &apos;Spike&apos;, &apos;Tyke&apos;]</span><br><span class="line"># 排序的依据是&apos;moT&apos;  &apos;yrreJ&apos;, &apos;ekipS&apos; &apos;ekyT&apos;</span><br><span class="line"></span><br><span class="line">def fk(s):</span><br><span class="line">    r =  s[::-1]</span><br><span class="line">    print(&quot;字符串&quot;, s, &apos;排序的依据是&apos;, r)</span><br><span class="line">    return r</span><br><span class="line"></span><br><span class="line">L = sorted(names, key=fk)</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure><h4 id="递归函数-recursion"><a href="#递归函数-recursion" class="headerlink" title="递归函数 recursion"></a>递归函数 recursion</h4><p>  函数直接或间接的调用自身</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def say_story():</span><br><span class="line">    print(&quot;从前有座山,山上有座庙,庙里有个老和尚讲故事:&quot;)</span><br><span class="line">    say_story()</span><br><span class="line">    print(&quot;讲故事结束&quot;)</span><br><span class="line"></span><br><span class="line">say_story()</span><br><span class="line">print(&quot;程序结束&quot;)</span><br></pre></td></tr></table></figure><p>示例:</p><p>  # 函数直接调用自己</p><p>  def f1():</p><p>​      f1()  # 直接调用自己</p><p>  f1()</p><p>  # 函数间接调用自己</p><p>  def fa():</p><p>​      fb()</p><p>  def fb():</p><p>​      fa()  # 间接的调用自己</p><p>  fa()</p><p>说明:</p><p>  递归一定要控制递归的层数,当符合一定条件时要终止递归调用</p><p>  几乎所有的递归都能用while循环来代替</p><p>优缺点:</p><p>  优点是可以把问题简单化,让思路更为清晰,代码更简洁</p><p>  缺点是因系统环境影响大,当递归深度太大时,可能会得到不可预知的结果</p><p>递归函数调用分为两个阶段:</p><ol><li>递推阶段</li></ol><p>​     从原问题出发,按递归公式递推从未知到已知,最终到达递归终止条件</p><ol start="2"><li>回归阶段</li></ol><p>​     按递归终止条件求出结果,逆向逐步代入递归公式,回归原问题求解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意递归调用和根据条件结束递归</span><br><span class="line">def fx(n):</span><br><span class="line">    print(&quot;递归进入第&quot;, n, &quot;层&quot;)</span><br><span class="line">    if n == 3:</span><br><span class="line">        return</span><br><span class="line">    fx(n + 1)  # 进入下一层</span><br><span class="line">    print(&quot;递归退出第&quot;, n, &quot;层&quot;)</span><br><span class="line"></span><br><span class="line">fx(1)</span><br><span class="line">print(&apos;程序结束&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def myfac(n):</span><br><span class="line">    # 如果n为1则知道 1的阶乘是1,直接返回</span><br><span class="line">    if n == 1:</span><br><span class="line">        return 1</span><br><span class="line">    # 否则,进入递推阶段等待下一个结果后再返回</span><br><span class="line">    return n * myfac(n-1)</span><br><span class="line"></span><br><span class="line">print(myfac(5))  # 120</span><br><span class="line">print(myfac(50))  # ???</span><br></pre></td></tr></table></figure><p>练习:</p><p>  用递归的方式求1 + 2 + 3 + …  + n 的和</p><p>  def mysum(n):</p><p>​      …</p><p>  print(mysum(100))  # 5050</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def mysum(n):</span><br><span class="line">    if n == 1:</span><br><span class="line">        return 1</span><br><span class="line">    return n + mysum(n - 1)</span><br><span class="line"></span><br><span class="line">print(mysum(100))  # 5050</span><br><span class="line"># print(mysum(1000))  # 崩溃 crash</span><br></pre></td></tr></table></figure><p>思考题:</p><p>  已知有五位朋友在一起</p><p>​    第五位朋友说他比第四位朋友大2岁</p><p>​    第四位朋友说他比第三位朋友大2岁</p><p>​    第三位朋友说他比第二位朋友大2岁</p><p>​    第二位朋友说他比第一位朋友大2岁</p><p>​    第一位朋友说他10岁</p><p>  def getage(n): # 求第n个人的年龄</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def getage(n): # 求第n个人的年龄</span><br><span class="line">    if n == 1:</span><br><span class="line">        return 10</span><br><span class="line">    return getage(n - 1) + 2</span><br><span class="line"></span><br><span class="line">print(getage(5))</span><br></pre></td></tr></table></figure><h4 id="闭包-closure"><a href="#闭包-closure" class="headerlink" title="闭包 closure"></a>闭包 closure</h4><p>  什么是闭包</p><p>​    闭包是引用了此函数外部变量的函数</p><p>  闭包必须满足三个条件:</p><p>​    1. 必须有内嵌函数</p><p>​    2. 内嵌函数必须引用外部函数中的变量</p><p>​    3. 外部函数返回值必须是内嵌函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 定义很多个函数每个函数求 x**y次方,y是可变的</span><br><span class="line"># 示意</span><br><span class="line">def pow2(x):</span><br><span class="line">    return x**2</span><br><span class="line"></span><br><span class="line">def pow3(x):</span><br><span class="line">    return x**3</span><br><span class="line"></span><br><span class="line"># ...</span><br><span class="line">def pow99(x):</span><br><span class="line">    return x**99</span><br><span class="line"></span><br><span class="line"># 以下用闭包来实现</span><br><span class="line">def make_power(y):</span><br><span class="line">    def fn(x):</span><br><span class="line">        return x ** y</span><br><span class="line">    return fn</span><br><span class="line"></span><br><span class="line">pow2 = make_power(2)  # pow2绑定一个闭包</span><br><span class="line">print(&quot;5的平方是:&quot;, pow2(5))  # 25</span><br><span class="line"></span><br><span class="line">pow3 = make_power(3)</span><br><span class="line">print(&quot;5的立方是:&quot;, pow3(5))</span><br><span class="line">pow99 = make_power(99)</span><br><span class="line">print(&apos;2的99次方是:&apos;, pow99(2))</span><br></pre></td></tr></table></figure><p>练习:</p><ol><li>编写程序求 1 ~ 20的阶乘的和</li></ol><p>​    即:</p><p>​      1! + 2! + 3! + … + 20!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># 方法1</span><br><span class="line"># s = 0</span><br><span class="line"># for x in range(1, 21):</span><br><span class="line">#     # 计算x的阶乘</span><br><span class="line">#     r = 1</span><br><span class="line">#     for y in range(1, x + 1):</span><br><span class="line">#         r *= y</span><br><span class="line">#     # 把x! r加到s中</span><br><span class="line">#     s += r</span><br><span class="line"></span><br><span class="line"># 方法2</span><br><span class="line"># def myfac(x):</span><br><span class="line">#     r = 1</span><br><span class="line">#     for y in range(1, x + 1):</span><br><span class="line">#         r *= y</span><br><span class="line">#     return r</span><br><span class="line"></span><br><span class="line"># s = 0</span><br><span class="line"># for x in range(1, 21):</span><br><span class="line">#     # 计算x的阶乘</span><br><span class="line">#     r = myfac(x)</span><br><span class="line">#     # 把x! r加到s中</span><br><span class="line">#     s += r</span><br><span class="line"></span><br><span class="line"># 方法3</span><br><span class="line"># def myfac(x):</span><br><span class="line">#     r = 1</span><br><span class="line">#     for y in range(1, x + 1):</span><br><span class="line">#         r *= y</span><br><span class="line">#     return r</span><br><span class="line"></span><br><span class="line"># s = sum(map(myfac, range(1, 21)))</span><br><span class="line"></span><br><span class="line"># 方法4</span><br><span class="line">import math</span><br><span class="line">s = sum(map(math.factorial, range(1, 21)))</span><br><span class="line"></span><br><span class="line">print(s)  #</span><br></pre></td></tr></table></figure><ol start="2"><li>已知有列表:</li></ol><p>​    L = [[3, 5, 8], 10, [[13, 14], 15, 18], 20]</p><p>​    1) 写个函数print_list(lst)  打印出所有的数字,即:</p><p>​      print_list(L)  # 打印3 5 8 10 13…</p><p>​    2) 写一个函数sum_list(lst) 返回这个列表中所有数字的和</p><p>​       print(sum_list(L))  # 106</p><p>  注:</p><p>​    type(x) 可以返回一个变量的类型,如:</p><p>​       >&gt;&gt; type(20) is int  # True</p><p>​       >&gt;&gt; type([1, 2, 3]) is list # True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">L = [[3, 5, 8], 10, [[13, 14], 15, 18], 20]</span><br><span class="line"># 1) 写个函数print_list(lst)  打印出所有的数字,即:</span><br><span class="line">def print_list(lst):</span><br><span class="line">    for x in lst:</span><br><span class="line">        # 当x是数字时,打印这个数字</span><br><span class="line">        if type(x) is int:</span><br><span class="line">            print(x)</span><br><span class="line">        # 当x是列表时,打印列表</span><br><span class="line">        else:</span><br><span class="line">            print_list(x)</span><br><span class="line"></span><br><span class="line">print_list(L)  # 打印3 5 8 10 13...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 2) 写一个函数sum_list(lst) 返回这个列表中所有数字的和</span><br><span class="line"></span><br><span class="line">def sum_list(lst):</span><br><span class="line">    s = 0</span><br><span class="line">    for x in lst:</span><br><span class="line">        # 如果x是整数</span><br><span class="line">        if type(x) is int:</span><br><span class="line">            s += x</span><br><span class="line">        # 如果x是列表,则s+= 列表的所有元素的和</span><br><span class="line">        else:</span><br><span class="line">            s += sum_list(x)</span><br><span class="line"></span><br><span class="line">    return s</span><br><span class="line"></span><br><span class="line">print(sum_list(L))  # 106</span><br></pre></td></tr></table></figure><h4 id="装饰器-decorator-专业提高篇"><a href="#装饰器-decorator-专业提高篇" class="headerlink" title="装饰器 decorator(专业提高篇)"></a>装饰器 decorator(专业提高篇)</h4><p>  作用:</p><p>​    通常在不改变原函数的情况下,改变或添加原函数功能 </p><p>  什么是装饰器:</p><p>​    装饰器是一个函数,能常用来包装另一个函数或类(后面才讲)</p><p>函数装饰器</p><p>  是指装饰器函数,传入的是函数,返回的也是函数</p><p>语法:</p><p>  def 装饰器函数名(形参):</p><p>​     语句块</p><p>​     return 函数对象</p><p>  @装饰器函数名</p><p>  def 函数名(形参列表):</p><p>​      语句块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 以下函数是装饰器函数,fn用来绑定被装饰函数</span><br><span class="line">def mydeco(fn):</span><br><span class="line">    def fx():</span><br><span class="line">        print(&quot;++++++这是fn被调用之前++++&quot;)</span><br><span class="line">        fn()</span><br><span class="line">        print(&quot;------这是fn被调用之后----&quot;)</span><br><span class="line">    return fx</span><br><span class="line"></span><br><span class="line">@mydeco</span><br><span class="line">def myfunc():</span><br><span class="line">    print(&quot;myfunc被调用!&quot;)</span><br><span class="line"></span><br><span class="line"># 以上@mydeco等同于在def myfunc之后加了</span><br><span class="line"># 如下语句</span><br><span class="line"># myfunc = mydeco(myfunc)</span><br><span class="line"></span><br><span class="line">myfunc()</span><br><span class="line">myfunc()</span><br><span class="line">myfunc()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 此示例用装饰器改变原来函数的调用流程(业务流程)</span><br><span class="line"># 银行业务</span><br><span class="line"></span><br><span class="line"># 小铭同学</span><br><span class="line">def privileged_check(fn):</span><br><span class="line">    def fx(n, x):</span><br><span class="line">        print(&quot;正在进行权限验证....&quot;)</span><br><span class="line">        fn(n, x)</span><br><span class="line">    return fx</span><br><span class="line"></span><br><span class="line"># -------以下是魏老师写的程序------</span><br><span class="line">@privileged_check</span><br><span class="line">def save_money(name, x):</span><br><span class="line">    print(name, &apos;存钱&apos;, x, &apos;元&apos;)</span><br><span class="line"></span><br><span class="line">@privileged_check</span><br><span class="line">def withdraw(name, x):</span><br><span class="line">    print(name, &apos;取钱&apos;, x, &apos;元&apos;)</span><br><span class="line"></span><br><span class="line"># -------以下是小张写的程序------</span><br><span class="line">save_money(&apos;小王&apos;, 200)</span><br><span class="line">save_money(&apos;小赵&apos;, 400)</span><br><span class="line">withdraw(&apos;小李&apos;, 500)</span><br></pre></td></tr></table></figure><p>##### </p><p>函数的文档字符串</p><p>  函数内第一次未赋值给任何变量的字符串是函数的文档字符串</p><p>  语法:</p><p>​    def 函数名(参数列表):</p><p>​        “函数的文档字符串”</p><p>​        函数语句块</p><p>  示例:</p><p>​    def cba():</p><p>​        “””这是一块文档字符串</p><p>​        以下省略300字…”””</p><p>​        pass</p><p>​    >&gt;&gt; help(cba)</p><p>函数的 <strong>doc</strong>属性</p><p>  <strong>doc</strong>属性用于记录函数的文档字符串</p><p>  如:</p><p>​    print(cba.<strong>doc</strong>)</p><h5 id="函数定义语句-def语句-的完整语法"><a href="#函数定义语句-def语句-的完整语法" class="headerlink" title="函数定义语句(def语句)的完整语法:"></a>函数定义语句(def语句)的完整语法:</h5><p>  [@装饰器名1]</p><p>  [@装饰器名2]</p><p>  […]</p><p>  def 函数名([位置形参], [*元组形参], [命名关键字形参], [**字典形参]):</p><p>​      “文档字符串”</p><p>​      语句块</p><p>面试题:</p><p>  L = [1, 2]</p><p>  def f(n, lst=[]):</p><p>​      ‘’’ lst 绑定的列表[] 会在def语句</p><p>​      创建时创建,且和f绑定的函数一同存在’’’</p><p>​      lst.append(n)</p><p>​      print(lst)</p><p>  f(3, L)  # [1, 2, 3]</p><p>  f(4, L)  # [1, 2, 3, 4]</p><p>  f(100)  # [100]</p><p>  f(200)  # [100, 200]</p><p>  f(200)  # [100, 200, 200]</p><p>解决方法:</p><p>  # 以上函数改写如下:</p><p>  def f(n, lst=None):</p><p>​      if lst is None:</p><p>​          lst = []</p><p>​      lst.append(n)</p><p>​      print(lst)</p><h4 id="迭代器-Iterator"><a href="#迭代器-Iterator" class="headerlink" title="迭代器　Iterator"></a>迭代器　Iterator</h4><p>  什么是迭代器</p><p>​     迭代器是访问可迭代对象的工具</p><p>​     迭代器是指用iter(obj) 函数返回的对象(实例)</p><p>​     迭代器可以用next(it) 函数获取可迭代对象的数据</p><p>迭代器函数:</p><p>  iter(iterable) 从可迭代对象中返回一个迭代器,iterable 必须是能提供一个迭代器的对象</p><p>  next(iterator)  从迭代器iterator中获取下一个记录,如果无法获取下一条记录,则触发StopIteration异常通知</p><p>说明:</p><p>  迭代器只能往前取值,不会后退</p><p>示例:</p><p>  L = [1, 3, 5, 7]</p><p>  it = iter(L)  # 让iter函数从L中获取迭代器</p><p>​                # it 绑定的是迭代器</p><p>  print(next(it))  # 1</p><p>  print(next(it))  # 3</p><p>  print(next(it))  # 5</p><p>  print(next(it))  # 7</p><p>  print(next(it))  # StopIteration</p><p>用迭代器和while来代替for语循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">L = [2, 3, 5, 7]</span><br><span class="line">it = iter(L)  # 获取迭代器</span><br><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        x = next(it)</span><br><span class="line">        print(x)</span><br><span class="line">    except StopIteration:</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">print(&quot;--------------------&quot;)</span><br><span class="line">for x in L:</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><p>练习:</p><p>  有一个集合:</p><p>​    s = {‘唐僧’, ‘悟空’, ‘八戒’, ‘沙僧’}</p><p>  用for语句遍历所有元素如下:</p><p>​    for x in s:</p><p>​        print(x)</p><p>​    else:</p><p>​        print(“遍历结束”)</p><p>  请将上面的for语句改写为while语句和迭代器实现 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;&apos;唐僧&apos;, &apos;悟空&apos;, &apos;八戒&apos;, &apos;沙僧&apos;&#125;</span><br><span class="line">for x in s:</span><br><span class="line">    print(x)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;遍历结束&quot;)</span><br><span class="line"></span><br><span class="line">print(&quot;=============================&quot;)</span><br><span class="line">myit = iter(s) # 获取拿到迭代器</span><br><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        x = next(myit)</span><br><span class="line">        print(x)</span><br><span class="line">    except StopIteration:</span><br><span class="line">        print(&quot;遍历结束&quot;)</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><p>练习:</p><ol><li>一个球从100米高空落下,每次落地后反弹高度为原高度的一半地,再落下,</li></ol><p>​    1) 写程序算出皮球在第10次落地后反弹多高</p><p>​    2) 打印10次后球出共经过多少米路程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">def get_last_height(meter, times):</span><br><span class="line">    &apos;&apos;&apos;根据小于的初始高度meter和次数,返回最后的反弹高度&apos;&apos;&apos;</span><br><span class="line">    for _ in range(times):</span><br><span class="line">        meter /= 2</span><br><span class="line">    return meter</span><br><span class="line"></span><br><span class="line">print(&quot;球第10次落地后的高度是:&quot;,</span><br><span class="line">      get_last_height(100, 10))</span><br><span class="line">    </span><br><span class="line">def get_distance(meter, times):</span><br><span class="line">    s = 0  # 记录球的总行程</span><br><span class="line">    for _ in range(times):</span><br><span class="line">        # 记录下落时行程</span><br><span class="line">        s += meter</span><br><span class="line">        # 算出反弹高度</span><br><span class="line">        meter /= 2</span><br><span class="line">        # 记录反弹的行程</span><br><span class="line">        s += meter</span><br><span class="line"></span><br><span class="line">    return s</span><br><span class="line"></span><br><span class="line">print(&quot;球在第10次反弹后的总行程是:&quot;, </span><br><span class="line">      get_distance(100, 10), &quot;米&quot;)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>分解质因数, 输入一个正整数,分解质因数.</p><p>如输入 : 90  则打印: 90 = 2<em>3</em>3*5</p><p>(质因数是指最小能被原数整除的素数(不包括1))</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">def get_zhiyin_list(x):</span><br><span class="line">    &quot;&quot;&quot;此函数将返回包含x的所有质数数的列表</span><br><span class="line">    如:x = 90</span><br><span class="line">    则返回 [2, 3, 3, 5]</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    L = []</span><br><span class="line">    # 循环查找x的质数,如果找到质数入就加入到L列表中,直到x等于1为止</span><br><span class="line">    while x &gt; 1:</span><br><span class="line">        # 以下循环只找一个质因数,找以后循环停止</span><br><span class="line">        # 再返回上面的循环</span><br><span class="line">        for i in range(2, x + 1):</span><br><span class="line">            if x % i == 0: # 整除了一定</span><br><span class="line">                # 此时i一定是质因数</span><br><span class="line">                L.append(i)</span><br><span class="line">                x = int(x / i)</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">    return L</span><br><span class="line"></span><br><span class="line">n = int(input(&quot;请输入一个大于零的整数: &quot;))</span><br><span class="line">L = get_zhiyin_list(n)</span><br><span class="line">s = &apos;*&apos;.join( (str(x) for x in L) )</span><br><span class="line">print(n, &apos;=&apos;, s)</span><br></pre></td></tr></table></figure><h4 id="生成器-Generator-python2-5及之后"><a href="#生成器-Generator-python2-5及之后" class="headerlink" title="生成器 Generator (python2.5及之后)"></a>生成器 Generator (python2.5及之后)</h4><p>  生成器是能够动态提供数据的可迭代对象</p><p>  生成器是在运行时生成数据,与容器类不同,它通常不会在内存中保存大量的数据,而是现用现生成</p><p>生成器有两种:</p><p>   \1. 生成器函数</p><p>   \2. 生成器表达式</p><p>生成器函数:</p><p>  含有yield语句的函数是生成器函数,此函数被调用将返回一个生成器对象</p><p>​    yield 翻译为(产生或生成)</p><p>yield 语句</p><p>  语法:</p><p>​    yield 表达式</p><p>  说明:</p><p>​    yield 用于 def 函数中,目的是将此函数作用生成器函数使用</p><p>​    yield 用来生成数据 ,供迭代器的next(it)函数取值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意生成器函数的定义和使用</span><br><span class="line">def myyield():</span><br><span class="line">    &apos;&apos;&apos;这是一个生成器函数,</span><br><span class="line">    此函数用来动态生成2,3,5,7&apos;&apos;&apos;</span><br><span class="line">    yield 2</span><br><span class="line">    yield 3</span><br><span class="line">    yield 5</span><br><span class="line">    yield 7</span><br><span class="line"></span><br><span class="line"># 用生迭代器访问这个生成器函数</span><br><span class="line">gen = myyield()  # 生成器函数调用将返回一个生成器</span><br><span class="line">print(gen)  # gen是一个生成器对象</span><br><span class="line"></span><br><span class="line">it = iter(gen)  # 拿到迭代器</span><br><span class="line">print(next(it))  # 2</span><br><span class="line">print(next(it))  # 3</span><br><span class="line">print(next(it))  # 5</span><br><span class="line">print(next(it))  # 7</span><br><span class="line"># print(next(it))  # StopIteration</span><br><span class="line"></span><br><span class="line">print(&apos;---以下用for语句访问生成器---&apos;)</span><br><span class="line">for x in myyield():</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><p>生器函数说明:</p><p>  \1. 生成器函数调用将返回一个生成器对象,生成器对象是可迭代对象</p><p>  \2. 在生成器函数内调用return语句会触发一个 StopIteration 异常(即生成数据结束)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意用生成器函数创建生成从0开始到n结束的一系列整数(不包含n)</span><br><span class="line">def myinteger(n):  # integer(整数)</span><br><span class="line">    i = 0  # 设置初始值为0</span><br><span class="line">    while i &lt; n:</span><br><span class="line">        yield i  # 生成i给next(it) 调用</span><br><span class="line">        i += 1  # 为生成下一个数做准备</span><br><span class="line"></span><br><span class="line">for x in myinteger(10000000000000000000):</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><p>练习:</p><p>  写一个生成器函数 myeven(start, stop) 用来生成从start开始到stop结束区间内的一系列偶数(不包含stop)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def myeven(start, stop):</span><br><span class="line">    for x in range(start, stop):</span><br><span class="line">        if x % 2 == 0:</span><br><span class="line">            yield x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">evens = list(myeven(10, 20))</span><br><span class="line">print(evens) # [10, 12, 14, 16, 18]</span><br><span class="line">for x in myeven(5, 10):</span><br><span class="line">    print(x)  # 6  8</span><br><span class="line">L = [x for x in myeven(0, 10)]</span><br><span class="line">print(L) # [0, 2, 4, 6, 8]</span><br></pre></td></tr></table></figure><h5 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式:"></a>生成器表达式:</h5><p>  语法</p><p>​    (表达式 for 变量 in 可迭代对象 [if 真值表达式])</p><p>  说明:</p><p>​    if 子句可以省略</p><p>  作用:</p><p>​    用推导式形式创建一个新的生成器</p><p>  示例:</p><p>​    gen = (x ** 2 for x in range(1, 5))</p><p>​    it = iter(gen)</p><p>​    next(it)  # 1</p><p>​    next(it)  # 4</p><p>​    next(it)  # 9</p><p>​    next(it)  # 16</p><p>​    next(it)  # StopIteration</p><p>练习:</p><p>  已知有列表:</p><p>​    L = [2, 3, 5, 7, 10, 15]</p><p>  1) 写一个生成器函数,让此函数能动态提供数据,数据为原列表的数字的平方+1</p><p>  2) 写一个生成器表达式,让此表达式能动态提供数据,数据依旧为原列表数字的平方+1</p><p>  3) 生成一个列表,此列表内的数据为原列表的数字的平方+1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">def mygen_fun(lst):</span><br><span class="line">    for x in lst:</span><br><span class="line">        yield x ** 2 + 1</span><br><span class="line">L2 = list(mygen_fun(L))</span><br><span class="line">print(L2)</span><br><span class="line"></span><br><span class="line"># def mygen_fun2():</span><br><span class="line">#     for x in L:</span><br><span class="line">#         yield x ** 2 + 1</span><br><span class="line"># L2 = list(mygen_fun())</span><br><span class="line"># print(L2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#   2) 写一个生成器表达式,让此表达式能动态提供数据,数据依旧为原列表数字的平方+1</span><br><span class="line"></span><br><span class="line">L3 = list( (x ** 2 + 1 for x in L) )</span><br><span class="line">print(&apos;L3=&apos;, L3)</span><br><span class="line">#   3) 生成一个列表,此列表内的数据为原列表的数字的平方+1</span><br><span class="line"></span><br><span class="line">L4 = [x ** 2 + 1 for x in L]</span><br><span class="line">print(&quot;L4=&quot;, L4)</span><br></pre></td></tr></table></figure><p>看下列程序的输出结果有什么不同,为什么?</p><p>  # 第一段程序</p><p>  L = [2, 3, 5, 7]</p><p>  L2 = [x * 10 for x in L]</p><p>  it = iter(L2)</p><p>  print(next(it))  # 20</p><p>  L[1] = 30</p><p>  print(next(it))  # 30</p><p>  # 第二段程序</p><p>  L = [2, 3, 5, 7]</p><p>  L2 = (x * 10 for x in L)  # &lt;-此处已修改</p><p>  it = iter(L2)</p><p>  print(next(it))  # 20</p><p>  L[1] = 30</p><p>  print(next(it))  # 300</p><p>练习:</p><ol><li>写一个生成器函数,给出开始值begin,和终止值end,此生成器函数生成begin~end 范围内的全部素数(不包含end)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def is_prime(x):</span><br><span class="line">    if x &lt; 2:</span><br><span class="line">        return False</span><br><span class="line">    for i in range(2, x):</span><br><span class="line">        if x % i == 0:</span><br><span class="line">            return False</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def primes(begin, end):</span><br><span class="line">    for x in range(begin, end):</span><br><span class="line">        # 如果x是素数,则用yield把这个送回给调用者</span><br><span class="line">        if is_prime(x):</span><br><span class="line">            yield x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L = list(primes(10, 20))</span><br><span class="line">print(L)  # [11, 13, 17, 19]</span><br><span class="line"># 求: 200以内全部素数的和:</span><br><span class="line">print(sum(primes(0, 200)))</span><br></pre></td></tr></table></figure><h5 id="迭代工具函数"><a href="#迭代工具函数" class="headerlink" title="迭代工具函数"></a>迭代工具函数</h5><p>  作来生成一个个性化的可迭代对象</p><p>函数  说明</p><p>  zip(iter1[, iter2, …]) 返回一个zip生成器对象,此对象用于生成元组,元组的数据分别来自于参数中的每个可迭代对象,生成元组的个数由最小的可迭代对象大小决定</p><p>  enumerate(iterable, start=0) 返回一个enumerate生成器对象,此对象生成类型为(索引,值)的元组,默认索引从零开始,也可以用start指定</p><p>  示例:</p><p>​    numbers = [10086, 10000, 10010,95588]</p><p>​    names = [‘中国移动’,’中国电信’,’中国联通’]</p><p>​    for t in zip(numbers, names):</p><p>​        print(t)</p><p>​    for n, m in zip(numbers, names):</p><p>​        print(m,’的客服电话是’, n)</p><p>​    d = dict(zip(numbers, names))</p><p>​    for t in zip(numbers, names, range(1000)):</p><p>​        print(t)</p><p>zip函数的实现(用生成器函数实现) </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">numbers = [10086, 10000, 10010,95588]</span><br><span class="line">names = [&apos;中国移动&apos;,&apos;中国电信&apos;,&apos;中国联通&apos;]</span><br><span class="line"></span><br><span class="line"># def myzip(*args):</span><br><span class="line">def myzip(iter1, iter2):</span><br><span class="line">    # 先拿到两个对象的迭代器</span><br><span class="line">    it1 = iter(iter1)</span><br><span class="line">    it2 = iter(iter2)</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            a = next(it1)</span><br><span class="line">            b = next(it2)</span><br><span class="line">            yield (a, b)</span><br><span class="line">        except StopIteration:</span><br><span class="line">            return  # 此生成器函数生成结束</span><br><span class="line"></span><br><span class="line">for t in myzip(numbers, names):</span><br><span class="line">    print(t)</span><br><span class="line"></span><br><span class="line">d = dict(myzip(numbers, names))</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure><p>enumerate 示例</p><p>   names = [‘中国移动’, ‘中国电信’, ‘中国联通’]</p><p>   for t in enumerate(names):</p><p>​       print(t)  # (1, ‘中国移动’), …</p><p>  写一个生成器函数 myxrange(start, stop, step) 来生成一系列整数</p><p>​     要求功能与range完全相同</p><p>​     不允许调用range函数和列表</p><p>​    然后用自己写的myxrange函数求 1 ~ 100内奇数的平方和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def myxrange(start, stop=None, step=1):</span><br><span class="line">    # 调用开始和结束的值</span><br><span class="line">    if stop is None:</span><br><span class="line">        stop = start</span><br><span class="line">        start = 0</span><br><span class="line"></span><br><span class="line">    # 正向生成:</span><br><span class="line">    if step &gt; 0:</span><br><span class="line">        while start &lt; stop:</span><br><span class="line">            yield start  # 生成当前值</span><br><span class="line">            start += step</span><br><span class="line">    elif step &lt; 0:</span><br><span class="line">        while start &gt; stop:</span><br><span class="line">            yield start</span><br><span class="line">            start += step  # 加上一个负数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L = [x**2 for x in myxrange(1, 101, 2)]</span><br><span class="line">print(sum(L))</span><br></pre></td></tr></table></figure><p>  写一个myfilter生成器函数,功能与filter函数功能完全相同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def myfilter(fn, iter1):</span><br><span class="line">    for x in iter1:</span><br><span class="line">        if fn(x) == True:</span><br><span class="line">            yield x</span><br><span class="line"></span><br><span class="line">L = [x for x in myfilter(</span><br><span class="line">    lambda x: x%2, range(10)</span><br><span class="line">)]  # L = [1, 3, 5, 7, 9]</span><br><span class="line"></span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;函数式编程&quot;&gt;&lt;a href=&quot;#函数式编程&quot; class=&quot;headerlink&quot; title=&quot;函数式编程&quot;&gt;&lt;/a&gt;函数式编程&lt;/h4&gt;&lt;p&gt;​    函数式编程是指用一系列函数解决问题 ; 函数是一等公民&lt;/p&gt;
&lt;p&gt;   说明:&lt;/p&gt;
&lt;p&gt;​    用每一个函数完成细小的功能,一系列函数的任意组成可以解决大问题&lt;/p&gt;
&lt;p&gt;​    函数仅接受输入并产生输出,不包含任何可能影响输出的内部状态&lt;/p&gt;
&lt;h5 id=&quot;函数的可重入性&quot;&gt;&lt;a href=&quot;#函数的可重入性&quot; class=&quot;headerlink&quot; title=&quot;函数的可重入性:&quot;&gt;&lt;/a&gt;函数的可重入性:&lt;/h5&gt;&lt;p&gt;  当一个函数没有访问除局部变量以外的变量,则此函数为可重入函数&lt;/p&gt;
    
    </summary>
    
      <category term="python函数" scheme="http://yoursite.com/categories/python%E5%87%BD%E6%95%B0/"/>
    
    
      <category term="python函数" scheme="http://yoursite.com/tags/python%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>函数</title>
    <link href="http://yoursite.com/2019/01/05/%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/01/05/函数/</id>
    <published>2019-01-05T07:46:15.000Z</published>
    <updated>2019-01-05T10:17:44.618Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数-function"><a href="#函数-function" class="headerlink" title="函数 function"></a>函数 function</h3><h5 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h5><p>​    函数是可以重复执行的语句块,可以重复的调用</p><p>​    函数是面向过程编程的最小单位</p><p>  作用:</p><p>​    \1. 用于封装语句块,提高代码的重用性</p><p>​    \2. 定义用户级别的函数</p><a id="more"></a>    <h5 id="def-语句"><a href="#def-语句" class="headerlink" title="def 语句"></a>def 语句</h5><p>  语法:</p><p>​    def 函数名(形参列表):</p><p>​        语句块</p><p>  说明:</p><p>​    \1. 函数的名字就是语句块的名称</p><p>​    \2. 函数名的命名规则写变量名的规则相同(必须是标识符)</p><p>​    \3. 函数名是一个变量(不要轻易对其赋值)</p><p>​    \4. 函数有自己的名字空间,在函数外部不可能访问函数内部的变量,在函数内部可以访问函数外部的变量</p><p>​      要让函数处理处部的数据最好用参数给函数传入一些数据</p><p>​    \5. 函数如果不需要传入参数,参数列表可以为空</p><p>​    \6. 语句部分不能为空.如果为空需要填充pass语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意函数的定义和调用</span><br><span class="line">def say_hello():</span><br><span class="line">    print(&quot;hello world!&quot;)</span><br><span class="line">    print(&quot;hello Tarena!&quot;)</span><br><span class="line">    print(&quot;hello everyone!&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">say_hello()  # 调用一次say_hello</span><br><span class="line">say_hello()  # 调用第二次</span><br><span class="line">say_hello()  # 第三次</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意写一个函数,此函数的功能是给它两个数据,让它把最大值的数据打印出来</span><br><span class="line">def mymax(a, b):</span><br><span class="line">    m = a</span><br><span class="line">    if b &gt; m:</span><br><span class="line">        m = b</span><br><span class="line">    print(&quot;最大值的数据是:&quot;, m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mymax(100, 200)</span><br><span class="line">mymax(&quot;ABC&quot;, &quot;123&quot;)</span><br></pre></td></tr></table></figure><h5 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h5><p>  函数名(实际调用传递参数)</p><p>  说明:</p><p>​    函数调用是一个表达式.如果函数内没有return语句.默认返回None对象</p><p>练习:</p><p>  写一个函数myadd,此函数中的参数列表里有两个参数x, y,此函数的功能是打印 x + y的和:</p><p>  如:</p><p>​    def myadd(…):</p><p>​       …   # …是需要填充的部分</p><p>​    </p><p>​    myadd(100, 200)  # 打印300</p><p>​    myadd(“ABC”, “123”)  # 打印 ABC123</p><h5 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h5><p>  语法:</p><p>​    return [表达式]</p><p>​    注: [] 代表其中的内容可省略</p><p>  作用:</p><p>​    用于函数中,结束当前函数的执行,返回到调用函数的地方,同时返回一个对象的引用关系</p><p>  说明:</p><p>​    \1. return 语句后跟的表达式可以省略,省略后相当于 return None</p><p>​    \2. 如果函数内没有return语句,则函数执行完最后一条语句后返回None(相当于在最后加了一条return None语句)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意return语句的作用和用法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def say_hello2():</span><br><span class="line">    print(&quot;hello aaa&quot;)</span><br><span class="line">    print(&quot;hello bbb&quot;)</span><br><span class="line">    # return  # 等同于return None</span><br><span class="line">    # return 1 + 2</span><br><span class="line">    return [1, 2, 3, 3 + 1]</span><br><span class="line">    print(&quot;hello ccc&quot;)</span><br><span class="line"></span><br><span class="line">r = say_hello2() </span><br><span class="line">print(&quot;r=&quot;, r)  </span><br><span class="line"></span><br><span class="line">print(&quot;程序结束&quot;)</span><br><span class="line"></span><br><span class="line"># hello aaa</span><br><span class="line"># hello bbb</span><br><span class="line"># r= [1, 2, 3, 4]</span><br><span class="line"># 程序结束</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意return语句的作用和用法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def say_hello2():</span><br><span class="line">    print(&quot;hello aaa&quot;)</span><br><span class="line">    print(&quot;hello bbb&quot;)</span><br><span class="line">    print(&quot;hello ccc&quot;)</span><br><span class="line">    # 此处相当于有条语句 return None</span><br><span class="line"></span><br><span class="line">r = say_hello2()  # 调用</span><br><span class="line">print(&quot;r=&quot;, r)  # None</span><br><span class="line"></span><br><span class="line"># hello aaa</span><br><span class="line"># hello bbb</span><br><span class="line"># hello ccc</span><br><span class="line"># r= None</span><br></pre></td></tr></table></figure><p>练习:</p><p>  \1. 写一个函数 myadd2, 实现给出两个数,返回这两个数的和</p><p>​    如:</p><p>​      def myadd(x, y):</p><p>​          …..</p><p>​      a = int(input(“请输入第一个数: “))</p><p>​      b = int(input(“请输入第二个数: “))</p><p>​      print(“您输入的这两个数的和是”, myadd2(a, b))</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def myadd2(x, y):</span><br><span class="line">    z = x + y</span><br><span class="line">    return z</span><br><span class="line">    # return x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = int(input(&quot;请输入第一个数: &quot;))</span><br><span class="line">b = int(input(&quot;请输入第二个数: &quot;))</span><br><span class="line">print(&quot;您输入的这两个数的和是&quot;, myadd2(a,b))</span><br><span class="line"></span><br><span class="line">#请输入第一个数: 1</span><br><span class="line">#请输入第二个数: 2</span><br><span class="line">#您输入的这两个数的和是 3</span><br></pre></td></tr></table></figure><p>  \2. 写一个函数mymax3,返回三个数中最大的一个值</p><p>​    def mymax3(a, b, c):</p><p>​        …. # 此处自己实现</p><p>​    </p><p>​    print(mymax3(100, 300, 200))  # 300</p><p>​    print(mymax3(“ABC”, “123”, “abc”)) # abc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 方法1</span><br><span class="line"># def mymax3(a, b, c):</span><br><span class="line">#     zuida = a</span><br><span class="line">#     if b &gt; zuida:</span><br><span class="line">#         zuida = b</span><br><span class="line">#     if c &gt; zuida:</span><br><span class="line">#         zuida = c</span><br><span class="line">#     return zuida</span><br><span class="line"></span><br><span class="line"># 方法2</span><br><span class="line"># def mymax3(a, b, c):</span><br><span class="line">#     z = a if a &gt; b else b</span><br><span class="line">#     z = z if z &gt; c else c</span><br><span class="line">#     return z</span><br><span class="line"></span><br><span class="line">def mymax3(a, b, c):</span><br><span class="line">    return max(a, b, c)</span><br><span class="line">    # z = max(a, b)</span><br><span class="line">    # z = max(z, c)</span><br><span class="line">    # return z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(mymax3(100, 300, 200))  # 300</span><br><span class="line">print(mymax3(&quot;ABC&quot;, &quot;123&quot;, &quot;abc&quot;)) # abc</span><br></pre></td></tr></table></figure><p>  \3. 写一个函数 input_numbers,如下:</p><p>​      def input_numbers():</p><p>​         ….  # 此处自己实现</p><p>​      此函数用来获取用户循环输入的正整数,当用户输入负数时结束输入</p><p>​      将用户输入的数字以列表的形式返回,再用内建函数max,min,sum求出用户输入数的最大值,最小值及和</p><p>​      L = input_numbers()</p><p>​      print(L)  # 打印列表</p><p>​      print(“用户输入的最大数是:”, max(L))</p><p>​      print(“用户输入的最小数是:”, min(L))</p><p>​      print(“用户输入的数的和是:”, sum(L))</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def input_numbers():</span><br><span class="line">    lst = []</span><br><span class="line">    while True:</span><br><span class="line">        n = int(input(&quot;请输入正整数(负数结束):&quot;))</span><br><span class="line">        if n &lt; 0:</span><br><span class="line">            return lst</span><br><span class="line">            # break  # return lst</span><br><span class="line">        lst.append(n)</span><br><span class="line">    # return lst</span><br><span class="line"></span><br><span class="line">L = input_numbers()</span><br><span class="line">print(L)  # 打印列表</span><br><span class="line">print(&quot;用户输入的最大数是:&quot;, max(L))</span><br><span class="line">print(&quot;用户输入的最小数是:&quot;, min(L))</span><br><span class="line">print(&quot;用户输入的数的和是:&quot;, sum(L))</span><br></pre></td></tr></table></figure><p>练习:</p><p>  \1. 写一个函数get_chinese_char_count(s) 函数,此函数实现的功能是给定一个字符串,返回这个字符串中中文字符的个数</p><p>​    def get_chinese_char_count(s):</p><p>​        …. # 此处自己实现</p><p>​    </p><p>​    s = input(“请输入中英文混合的字符串: “)</p><p>​    print(“您输入的中文字符的个数是:”, </p><p>​           get_chinese_char_count(s))</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def get_chinese_char_count(s):</span><br><span class="line">    count = 0  # 记录中文字符的个数</span><br><span class="line">    # 此处用来记中文数</span><br><span class="line">    for ch in s:</span><br><span class="line">        if ord(ch) &gt; 127:</span><br><span class="line">            count += 1</span><br><span class="line"></span><br><span class="line">    return count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = input(&quot;请输入中英文混合的字符串: &quot;)</span><br><span class="line">print(&quot;您输入的中文字符的个数是:&quot;, </span><br><span class="line">        get_chinese_char_count(s))</span><br></pre></td></tr></table></figure><p>  \2. 定义两个函数:</p><p>​      sum3(a, b, c)  用于返回三个数的和</p><p>​      pow3(x)  用于返回x的三次方(立方)</p><p>​    用以上函数计算:</p><p>​      1) 计算 1的立方+ 2的立方 + 3的立方</p><p>​      2) 计算 1 + 2 + 3的和的立方</p><p>​      即:1<strong>3 + 2</strong>3+3<strong>3 和 (1+2+3)</strong>3 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def sum3(a, b, c):</span><br><span class="line">    return a + b + c</span><br><span class="line"></span><br><span class="line">def pow3(x):</span><br><span class="line">    return x ** 3</span><br><span class="line"></span><br><span class="line"># 1) 计算 1的立方+ 2的立方 + 3的立方</span><br><span class="line">s = sum3(pow3(1), pow3(2), pow3(3))</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"># 2) 计算 1 + 2 + 3的和的立方</span><br><span class="line">s = pow3(sum3(1, 2, 3))</span><br><span class="line">print(s)</span><br><span class="line">#  即:1**3 + 2**3+3**3 和 (1+2+3)**3</span><br></pre></td></tr></table></figure><h5 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数:"></a>函数的参数:</h5><p>  1.函数实际调用参数传递(把数据给函数)</p><p>  2.函数的形式参数(从调用者拿来(接收)数据)</p><h5 id="函数的实际调用参数传递"><a href="#函数的实际调用参数传递" class="headerlink" title="函数的实际调用参数传递"></a>函数的实际调用参数传递</h5><p>  传递方式:</p><p>​    1.位置传参</p><p>​       1.1 序列传参</p><p>​    2.关键字传参</p><p>​       2.2 字典关键字传参</p><h5 id="位置传参"><a href="#位置传参" class="headerlink" title="位置传参:"></a>位置传参:</h5><p>  实际参数(实参)的对应关系与形式参数(形参)的对应关系是按位置来依次对应的</p><p>  示意:</p><p>​    def mymin(a, b, c):</p><p>​        pass</p><p>​    #         ^  ^  ^</p><p>​    mymin(    1, 2, 3)</p><p>  说明:   实参个数必须与形参个数相同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意位置传参</span><br><span class="line">def myfun1(a, b, c):</span><br><span class="line">    print(&quot;a的值是:&quot;, a)</span><br><span class="line">    print(&quot;b的值是:&quot;, b)</span><br><span class="line">    print(&quot;c的值是:&quot;, c)</span><br><span class="line"></span><br><span class="line">myfun1(1, 2, 3)  # 1--&gt;a 2--&gt; b...</span><br><span class="line">myfun1(4, 5, 6)  # 4--&gt;a 5--&gt; b...</span><br></pre></td></tr></table></figure><h5 id="序列传参"><a href="#序列传参" class="headerlink" title="序列传参:"></a>序列传参:</h5><p>  序列: 字符串,列表,元组</p><p>  序列传参是指在函数调用过程中,用*(星号)将序列拆解后按位置进行传递的传参方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意序列传参</span><br><span class="line">def myfun1(a, b, c):</span><br><span class="line">    print(&quot;a的值是:&quot;, a)</span><br><span class="line">    print(&quot;b的值是:&quot;, b)</span><br><span class="line">    print(&quot;c的值是:&quot;, c)</span><br><span class="line"></span><br><span class="line">s1 = [11, 22, 33]</span><br><span class="line"># myfun1(s1[0], s1[1], s1[2])</span><br><span class="line">myfun1(*s1)  # 相当于 myfun1(11, 22, 33)</span><br><span class="line">s2 = (44, 55, 66)</span><br><span class="line">s3 = &quot;ABC&quot;</span><br><span class="line">myfun1(*s2)</span><br><span class="line">myfun1(*s3)</span><br></pre></td></tr></table></figure><p>  说明:</p><p>​    序列传参时,序列拆解的位置将与形参一一对应</p><p>​    序列的位置信息对应相应的参数位置</p><h5 id="关键字传参"><a href="#关键字传参" class="headerlink" title="关键字传参"></a>关键字传参</h5><p>  关键字传参是指传参时,按着形参的名称给形参赋值</p><p>  实参和形参按名称进行匹配</p><p>  示例见:    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意关键字传参</span><br><span class="line">def myfun1(a, b, c):</span><br><span class="line">    print(&quot;a的值是:&quot;, a)</span><br><span class="line">    print(&quot;b的值是:&quot;, b)</span><br><span class="line">    print(&quot;c的值是:&quot;, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myfun1(c=300, b=200, a=100)</span><br><span class="line">myfun1(b=20, c=30, a=10)</span><br><span class="line"># myfun1(b=2, c=3, b=1)  # 报错</span><br></pre></td></tr></table></figure><p>  说明:</p><p>​    实参和形参可以不按位置进行匹配.</p><p>字典关键字传参</p><p>  是指实参为字典 将字典用 **(双星号) 拆解后进行关键字传参的传参方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意字典关键字传参</span><br><span class="line">def myfun1(a, b, c):</span><br><span class="line">    print(&quot;a的值是:&quot;, a)</span><br><span class="line">    print(&quot;b的值是:&quot;, b)</span><br><span class="line">    print(&quot;c的值是:&quot;, c)</span><br><span class="line"></span><br><span class="line">d1 = &#123;&apos;c&apos;: 33, &apos;b&apos;:22, &apos;a&apos;:11&#125;</span><br><span class="line"># myfun1(d1[&apos;a&apos;], d1[&apos;b&apos;], d1[&apos;c&apos;])</span><br><span class="line"># myfun1(a=d1[&apos;a&apos;], b=d1[&apos;b&apos;], c=d1[&apos;c&apos;])</span><br><span class="line">myfun1(**d1) # 等同于myfun1(a=11,b=22,c=33)</span><br><span class="line">d2 = &#123;&apos;c&apos;: 33, &apos;b&apos;:22, &apos;a&apos;:11, &apos;d&apos;:44&#125;</span><br><span class="line"># myfun1(**d2)  # 报错</span><br><span class="line"></span><br><span class="line"># a的值是: 11</span><br><span class="line"># b的值是: 22</span><br><span class="line"># c的值是: 33</span><br></pre></td></tr></table></figure><p>  说明:</p><p>​    字典的键名和形参名必须一致</p><p>​    字典的键名必须是字符串,且必须为标识符的命名规则</p><p>​    字典的键名要在形参中存在</p><p>函数综合传参</p><p>  函数的传参方式,在能确定形参能唯一匹配到相应实参的情况下可以任意组合</p><p>  函数的位置传参要先于关键字传参 </p><p>  \1. 函数的位置传参和序列传参可以混合使用,且可以顺序颠倒</p><p>​    myfun1(100, *[200, 300])</p><p>​    myfun1(*[100, 200], 300)</p><p>​    myfun1(<em>[100], 200, </em>[300])</p><p>  \2. 函数位置传参和关键字传参可以混合使用</p><p>​    myfun1(100, c=300, b=200)</p><p>​    myfun1(100, **{“c”:300}, b=200)</p><p>——-以下讲的函数的定义及函数的形参—-</p><p>函数的缺省参数</p><p>  语法:</p><p>​    def 函数名(形参名1=默认实参1, 形参名2=默认实参2, …):</p><p>​        语句块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意函数的缺省参数</span><br><span class="line">def info(name, age=1, address=&quot;不详&quot;):</span><br><span class="line">    print(name, &quot;今年&quot;, age, &apos;岁&apos;,</span><br><span class="line">    &apos;家庭住址:&apos;, address)</span><br><span class="line"></span><br><span class="line">info(&quot;魏明择&quot;, 35, &apos;北京市朝阳区&apos;)</span><br><span class="line">info(&quot;Tarena&quot;, 16)</span><br><span class="line">info(&quot;张飞&quot;)</span><br><span class="line"></span><br><span class="line">#魏明择 今年 35 岁 家庭住址: 北京市朝阳区</span><br><span class="line"># Tarena 今年 16 岁 家庭住址: 不详</span><br><span class="line">#张飞 今年 1 岁 家庭住址: 不详</span><br></pre></td></tr></table></figure><p>  说明:</p><p>​    \1. 缺省参数必须自右至左依次存在,如果一个参数有缺省参数,则其右侧的所有参数都必须有缺省参数</p><p>​    \2. 缺省参数可以有0个,1个或多个,甚至全部都是缺省参数</p><p>  示例:</p><p>​    def fn(a, b=10, c):  # 错的</p><p>​        pass</p><p>​    def fn(a=0, b=10, c=20):  # 对的</p><p>​        pass</p><p>​    </p><p>练习:</p><p>  写一个函数 myadd,此函数可以计算两个数,三个数及四个数的和.</p><p>​    如:</p><p>​      def myadd(…):</p><p>​          …</p><p>​      print(myadd(10, 20))  # 30</p><p>​      print(myadd(100, 200, 300))  # 600</p><p>​      print(myadd(1, 2, 3, 4)) # 10</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def myadd(a, b, c=0, d=0):</span><br><span class="line">    return a + b + c + d</span><br><span class="line"></span><br><span class="line">print(myadd(10, 20))  # 30</span><br><span class="line">print(myadd(100, 200, 300))  # 600</span><br><span class="line">print(myadd(1, 2, 3, 4)) # 10</span><br></pre></td></tr></table></figure><p>函数形参的定义方式:</p><p>  位置形参</p><p>  星号元组形参</p><p>  命名关键字形参</p><p>  双星号字典形参</p><p>位置形参:</p><p>  语法:</p><p>​    def 函数名(形参名1, 形参名2, …):</p><p>​        语句块</p><p>星号元组形参</p><p>  语法:</p><p>​    def 函数名(* 元组形参名):</p><p>​        语句块</p><p>  作用:</p><p>​    收集多余的位置传参</p><p>  说明:</p><p>​    元组形参名一般命名为 ‘args’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意星号元组形参的定义及使用</span><br><span class="line">def func(*args):</span><br><span class="line">    print(&quot;用户传入的参数个数是:&quot;,len(args))</span><br><span class="line">    print(&apos;args=&apos;, args)</span><br><span class="line"></span><br><span class="line"># func()  # 无参调用</span><br><span class="line"># func(1, 2, 3)</span><br><span class="line">func(1, 2, 3, &quot;AAA&quot;, &quot;BBB&quot;, &quot;CCC&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#用户传入的参数个数是: 6</span><br><span class="line"># args= (1, 2, 3, &apos;AAA&apos;, &apos;BBB&apos;, &apos;CCC&apos;)</span><br></pre></td></tr></table></figure><p>练习:</p><p>  写一个函数,mysum 可以传入任意个数字的实参,此函数调用将返回实参的和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def mysum(*args):</span><br><span class="line">    # s = 0</span><br><span class="line">    # for x in args:</span><br><span class="line">    #     s += x</span><br><span class="line">    # return s</span><br><span class="line">    return sum(args)</span><br><span class="line"></span><br><span class="line">print(mysum())  # 0</span><br><span class="line">print(mysum(1, 2, 3))  # 6</span><br></pre></td></tr></table></figure><p>练习:</p><p>  写一个函数min_max(…) 函数,</p><p>   此函数至少要传一个参数,并返回全部这些数数的最小值,最大值(形成元组,最小在前,最大值在后)</p><p>   调用此函数,得到最小值和最大值并打印出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># 方法1</span><br><span class="line"># def min_max(a, *args):</span><br><span class="line">#     zuixiao = a</span><br><span class="line">#     for x in args:</span><br><span class="line">#         if x &lt; zuixiao:</span><br><span class="line">#             zuixiao = x</span><br><span class="line"></span><br><span class="line">#     # 求最大</span><br><span class="line">#     zuida = a</span><br><span class="line">#     for x in args:</span><br><span class="line">#         if x &gt; zuida:</span><br><span class="line">#             zuida = x</span><br><span class="line">#     return (zuixiao, zuida)</span><br><span class="line"></span><br><span class="line"># 方法2    </span><br><span class="line"># def min_max(a, *args):</span><br><span class="line">#     zuixiao = min(args) # 先从第二个起的参数选出最小值</span><br><span class="line">#     if a &lt; zuixiao:</span><br><span class="line">#         zuixiao = a</span><br><span class="line">    </span><br><span class="line">#     zuida = max(args)</span><br><span class="line">#     if a &gt; zuida:</span><br><span class="line">#         zuida = a</span><br><span class="line"></span><br><span class="line">#     return (zuixiao, zuida)</span><br><span class="line"></span><br><span class="line"># 方法3</span><br><span class="line">def min_max(a, *args):</span><br><span class="line">    zuixiao = min(a, *args)</span><br><span class="line">    zuida = max(a, *args)</span><br><span class="line"> </span><br><span class="line">    return (zuixiao, zuida)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(min_max(10, 20, 30))  # (10,30)</span><br><span class="line">x, y = min_max(8, 6, 4, 3, 9, 2, 1)</span><br><span class="line">print(&quot;最小值是:&quot;, x)  # 1</span><br><span class="line">print(&quot;最大值是:&quot;, y)  # 9</span><br><span class="line"># print(min_max())  # 没有实参报错</span><br></pre></td></tr></table></figure><p>命名关键字形参:</p><p>  语法:</p><p>​    def 函数名(*, 命名关键字形参1,命名关键字形参2, …):</p><p>​        语句块</p><p>​    # 或</p><p>​    def 函数名(*args, 命名关键字形参1,命名关键字形参2, …):</p><p>​        语句块</p><p>  作用:</p><p>​    强制所有的命名关键字形参都必须用关键字传参或字典关键字传参</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意命名关键字形参的定义的方式和调用方法</span><br><span class="line">def f1(*, c, d): #*之后的形参为命名关键字形参</span><br><span class="line">    print(&quot;c=&quot;, c)</span><br><span class="line">    print(&quot;d=&quot;, d)</span><br><span class="line"></span><br><span class="line"># f1(3, 4)  # 报错</span><br><span class="line">f1(d=4, c=3)  # 关键字正确</span><br><span class="line">d1 = &#123;&apos;c&apos;:30, &apos;d&apos;: 40&#125;</span><br><span class="line">f1(**d1)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意命名关键字形参的定义的方式和调用方法</span><br><span class="line">def f2(a, b, *args, c, d):</span><br><span class="line">    print(a, b)</span><br><span class="line">    print(args)</span><br><span class="line">    print(c, d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># f2(1, 2, 3, 4, d=200, c=100)</span><br><span class="line">f2(11,22, 33, **&#123;&apos;c&apos;:11, &apos;d&apos;:22&#125;)</span><br></pre></td></tr></table></figure><p>双星号字典形参</p><p>  语法:</p><p>​    def 函数名(**字典形参名):</p><p>​        语句块</p><p>  作用:</p><p>​    收集多余的关键字传参</p><p>  说明:</p><p>​    字典形参名一般命名为”kwargs”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意双星号字典形参的定义和调用</span><br><span class="line"></span><br><span class="line">def fun(**kwargs):</span><br><span class="line">    print(&quot;关键字传参个数是&quot;, len(kwargs))</span><br><span class="line">    print(&apos;kwargs=&apos;, kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun(a=1, b=&quot;BBBB&quot;, c=[2,3,4]) # 关键字传参</span><br><span class="line">fun()</span><br><span class="line">fun(a=1, b=2, c=3, d=4)</span><br><span class="line"></span><br><span class="line">#关键字传参个数是 3</span><br><span class="line"># kwargs= &#123;&apos;a&apos;: 1, &apos;b&apos;: &apos;BBBB&apos;, &apos;c&apos;: [2, 3, 4]&#125;</span><br><span class="line">#关键字传参个数是 0</span><br><span class="line"># kwargs= &#123;&#125;</span><br><span class="line">#关键字传参个数是 4</span><br><span class="line"># kwargs= &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3, &apos;d&apos;: 4&#125;</span><br></pre></td></tr></table></figure><p>函数的参数说明:</p><p>  位置形参,星号元组形参,命名关键字形参,双星号字典形参,缺省参数可以混合使用</p><p>函数参数自左至右的顺序为:</p><p>  位置形参</p><p>  星号元组形参</p><p>  命名关键字形参</p><p>  双星号字典形参</p><p>示例:</p><p>  def fx(a, b, *args, c, d, **kwargs):</p><p>​      pass</p><p>  fx(1,2,3,4,5, c=’C’, d=’D’, e=’E’)</p><p># 可以接收任意的位置传参和关键字传参的函数:</p><p>  def fn(*args, **kwargs):</p><p>​        print(‘args=’, args)</p><p>​        print(‘kwargs=’, kwargs)</p><p>  fn(1, 2, <em>“ABCD”, </em>[11,22], 3, c=100,**{‘a’:200})</p><p>思考题:</p><p>  查看</p><p>​    >&gt;&gt; help(print)</p><p>  猜想print()函数是形参列表是如何定义的?</p><p>​    def myprint(*args, sep=’ ‘, end=’\n’):</p><p>  查看&gt;&gt;&gt; range()函数猜想它的形参列表是如何定义的</p><p>练习:</p><p>  写一个myrange函数,参数可以传入1~3个,实际含义与range函数相同</p><p>  此函数返回符合range(…) 函数的列表</p><p>  如:</p><p>​    L = myrange(4)</p><p>​    print(L)  # [0, 1, 2, 3]</p><p>​    L = myrange(4, 6)</p><p>​    print(L)  # [4, 5]</p><p>​    L = myrange(1, 10, 3)</p><p>​    print(L)  # [1, 4, 7]</p><p>  (注: 可以调用range)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def myrange(a, b=None, c=None):</span><br><span class="line">    if b is None:</span><br><span class="line">        start = 0</span><br><span class="line">        stop = a  # 第一个数</span><br><span class="line">    else:</span><br><span class="line">        start = a</span><br><span class="line">        stop = b</span><br><span class="line">    if c is None:</span><br><span class="line">        step = 1</span><br><span class="line">    else:</span><br><span class="line">        step = c</span><br><span class="line">    # print(&quot;开始值:&quot;, start,</span><br><span class="line">    #       &quot;结束值:&quot;, stop,</span><br><span class="line">    #       &apos;步长&apos;, step)</span><br><span class="line">    return list(range(start, stop, step))</span><br><span class="line"></span><br><span class="line">L = myrange(4)</span><br><span class="line">print(L)  # [0, 1, 2, 3]</span><br><span class="line">L = myrange(4, 6)</span><br><span class="line">print(L)  # [4, 5]</span><br><span class="line">L = myrange(1, 10, 3)</span><br><span class="line">print(L)  # [1, 4, 7]</span><br></pre></td></tr></table></figure><p>全局变量和局部变量</p><p>局部变量:</p><p>  定义在函数内部的变量称为局部变量(函数的形参也是局部变量)</p><p>  局部变量只能在函数内部使用</p><p>  局部变量在函数调用时才能够被创建,在函数调用之后会自动销毁</p><p>全局变量:</p><p>  定义在函数外部,模块文件内部的变量称为全局变量</p><p>  全局变量,所有的函数都可以直接访问(但不能直接将其赋值)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意全局变量和局部变量</span><br><span class="line">a = 100  # 全局变量</span><br><span class="line">b = 200  # 全局变量</span><br><span class="line"></span><br><span class="line">def fx(c):  # c是局部变量</span><br><span class="line">    d = 400  # 局部变量</span><br><span class="line">    a = 10000</span><br><span class="line">    print(a, b, c, d)  # 优先访问局部变量</span><br><span class="line"></span><br><span class="line">fx(300)</span><br><span class="line">print(&apos;a =&apos;, a)  # 100</span><br><span class="line">print(&apos;b =&apos;, b)</span><br><span class="line"># print(&apos;c =&apos;, c)  # 出错</span><br><span class="line"># print(&apos;d =&apos;, d)  # 出错</span><br></pre></td></tr></table></figure><p>说明:</p><p>  \1. 在函数内部的赋值语句会创建局部变量,不会对全局变量造成影响</p><p>  \2. 局部变量只能在其被声明的函数内部访问,而全局变量可以在整个模块范围内访问</p><p>globals() 和 locals() 函数</p><p>  globals() 返回当前全局作用域内变量的字典</p><p>  locals() 返回当前局部作用域内变量的字典</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = 1</span><br><span class="line">b = 2</span><br><span class="line">c = 3</span><br><span class="line"></span><br><span class="line">def fn(c, d):</span><br><span class="line">    e = 300</span><br><span class="line">    # 此时有几个局部变量</span><br><span class="line">    print(&quot;locals() 返回:&quot;, locals())</span><br><span class="line">    #此时有几个全局变量</span><br><span class="line">    print(&quot;globals() 返回:&quot;, globals())</span><br><span class="line">    print(c)  # 访问局部变量100</span><br><span class="line">    print(globals()[&apos;c&apos;])  # 访问全局变量c   3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fn(100, 200)</span><br></pre></td></tr></table></figure><p>练习:</p><p>  素数/质数</p><p>​    2, 3, 5, 7, 11, 13</p><p>  \1. 写一个函数isprime(x) 判断x是否是素数.如果是素数返回True,否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def isprime(x):</span><br><span class="line">    # 如果x小于2不是素数</span><br><span class="line">    if x &lt; 2:</span><br><span class="line">        return False</span><br><span class="line">    # 如果x大于等于2,则用x对2...x-1的数求余.</span><br><span class="line">    for i in range(2, x):</span><br><span class="line">        # 如果余数为0则不是素数</span><br><span class="line">        if x % i == 0:</span><br><span class="line">            return False</span><br><span class="line">    # 否则就为素数</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line">print(isprime(4)) # False</span><br><span class="line">print(isprime(5)) # True</span><br></pre></td></tr></table></figure><p>\2. 写一个函数prime_m2n(m, n)  返回从m开始,到n结束的范围内的素数(不包含n),返回这些素数的列表,并打印</p><p>​    如:</p><p>​      L = prime_m2n(5, 10)</p><p>​      print(L)  # [5, 7]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def prime_m2n(m, n):</span><br><span class="line">    L = []</span><br><span class="line">    for x in range(m, n):</span><br><span class="line">        # 判断如果x是素数,则加到列表L中</span><br><span class="line">        if isprime(x):</span><br><span class="line">            L.append(x)</span><br><span class="line">    return L</span><br><span class="line"></span><br><span class="line">L = prime_m2n(5, 10)</span><br><span class="line">print(L)  # [5, 7]</span><br></pre></td></tr></table></figure><p>  \3. 写一个函数primes(n)  返回指定范围n以内的素数(不包含n)的全部素数的列表,并打印这些素数</p><p>​      L = primes(10)</p><p>​      print(L)  # [2, 3, 5, 7]</p><p>​     1) 打印100以内的全部素数</p><p>​     2) 打印200以内的全部素数的和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def primes(n):</span><br><span class="line">    return prime_m2n(0, n)</span><br><span class="line"></span><br><span class="line">L = primes(10)</span><br><span class="line">print(L)  # [2, 3, 5, 7]</span><br><span class="line"># 1) 打印100以内的全部素数</span><br><span class="line">print(primes(100))</span><br><span class="line"># 2) 打印200以内的全部素数的和</span><br><span class="line">print(sum(primes(200)))</span><br></pre></td></tr></table></figure><p>函数变量</p><p>  函数名是变量,他在创建时绑定一个函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意函数名绑定函数,函数名是变量 </span><br><span class="line">def fn():</span><br><span class="line">    print(&quot;hello world&quot;)</span><br><span class="line"></span><br><span class="line">f1 = fn</span><br><span class="line">print(f1)  # &lt;function fn at 0x7f0bb2eb0f28&gt;</span><br><span class="line"></span><br><span class="line">fn()  # hello world</span><br><span class="line">f1()  # hello world</span><br><span class="line">f2 = fn()  #</span><br><span class="line">print(f2)  # None</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def f1():</span><br><span class="line">    print(&quot;hello f1&quot;)</span><br><span class="line"></span><br><span class="line">def f2():</span><br><span class="line">    print(&quot;hello f2&quot;)</span><br><span class="line"></span><br><span class="line">f1, f2 = f2, f1</span><br><span class="line">f1()  # hello f2</span><br></pre></td></tr></table></figure><p>一个函数可以作为另一个函数的实参传递</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def f1():</span><br><span class="line">    print(&quot;hello f1&quot;)</span><br><span class="line"></span><br><span class="line">def f2():</span><br><span class="line">    print(&quot;hello f2&quot;)</span><br><span class="line"></span><br><span class="line">def fx(fn):</span><br><span class="line">    print(fn)  # &lt;function f1 at 0x????&gt;</span><br><span class="line">    fn()   # 请问调用谁?</span><br><span class="line"></span><br><span class="line">fx(f1)</span><br><span class="line">fx(f2)</span><br><span class="line"></span><br><span class="line">#&lt;function f1 at 0x0000000002071E18&gt;</span><br><span class="line">#hello f1</span><br><span class="line">#&lt;function f2 at 0x0000000002856598&gt;</span><br><span class="line">#hello f2</span><br></pre></td></tr></table></figure><p>观查下面函数的执行结果是什么?</p><p>  def goodbye(L):</p><p>​      for x in L:</p><p>​          print(“再见:”, x)</p><p>  def hello(L):</p><p>​      for x in L:</p><p>​          print(“您好:”, x)</p><p>  def fx(fn, L):</p><p>​      fn(L)</p><p>  fx(goodbye, [“Tom”, “Jerry”, “Spike”])</p><p>看懂如下代码:</p><p>  def myinput(fn):</p><p>​      L = [1, 3, 5, 7, 9]</p><p>​      r = fn(L)</p><p>​      return r</p><p>  print(myinput(max))  # 9</p><p>  print(myinput(min))  # 1</p><p>  print(myinput(sum))  # 25</p><p>结果：</p><blockquote><p>再见: Tom</p><p>再见: Jerry</p><p>再见: Spike</p></blockquote><p>函数可以作为另一个函数的返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 函数可以作为另一个函数的返回值</span><br><span class="line"></span><br><span class="line">def get_function():</span><br><span class="line">    s = input(&quot;请输入您要做的操作:&quot;)</span><br><span class="line">    if s == &apos;求最大&apos;:</span><br><span class="line">        return max</span><br><span class="line">    if s == &apos;求最小&apos;:</span><br><span class="line">        return min</span><br><span class="line">    if s == &apos;求和&apos;:</span><br><span class="line">        return sum</span><br><span class="line"></span><br><span class="line">L = [2, 4, 6, 8, 10]</span><br><span class="line">f = get_function()</span><br><span class="line">print(f(L))</span><br></pre></td></tr></table></figure><p>函数的嵌套定义:</p><p>  函数嵌套定义是指一个函数里用def语句来创建其它函数的情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意函数嵌套定义</span><br><span class="line">def fn_outter():</span><br><span class="line">    print(&quot;fn_outter被调用&quot;)</span><br><span class="line">    def fn_inner():</span><br><span class="line">        print(&quot;fn_inner被调用&quot;)</span><br><span class="line">    fn_inner()  # 调用一次</span><br><span class="line">    fn_inner()  # 调用第二次</span><br><span class="line">    print(&quot;fn_outter调用结束!&quot;)</span><br><span class="line"></span><br><span class="line">fn_outter()</span><br></pre></td></tr></table></figure><p>python的作用域:</p><p>  作用域也叫命名空间,是访问变量时查找变量名的范围空间</p><p>python的四个作用域:</p><p>​    作用域             英文        英文简写 </p><p> 局部作用域(函数内)      Local            L</p><p> 外部嵌套函数作用域 Enclosing function local   E</p><p> 函数定义所在模块作用域   Global           G</p><p> python内建模块的作用域  Builtin(Python)  B</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意python的作用域</span><br><span class="line">v = 100</span><br><span class="line">def f1():</span><br><span class="line">    v = 200</span><br><span class="line">    print(&quot;f1.v=&quot;, v)</span><br><span class="line">    def f2():</span><br><span class="line">        v = 300</span><br><span class="line">        print(&quot;f2.v=&quot;, v)</span><br><span class="line">    f2()</span><br><span class="line">f1()</span><br><span class="line">print(&apos;全局的v=&apos;, v)</span><br><span class="line"></span><br><span class="line">#f1.v= 200</span><br><span class="line">#f2.v= 300</span><br><span class="line">#全局的v= 100</span><br></pre></td></tr></table></figure><p>变量名的查找规则</p><p>  在访问变量时,先查找本地变量,然后是包裹此函数外部的函数内部的变量,之后是全局变量,最后是内建变量.</p><p>​     即: L –&gt; E –&gt; G –&gt; B</p><p>  在默认的情况下,变量名赋值会创建或者改变本地作用域内的变量</p><p>练习:</p><p>  得到下列程序运行的结果,思考为什么?</p><p>  L = [1, 2]</p><p>  def f1():</p><p>​      L = [3, 4, 5]</p><p>  f1()</p><p>  print(L)  # [1, 2]  因为f1()只制造了局部变量</p><p>  def f2():</p><p>​      L += [3, 4, 5]  # L = L + [3, 4, 5]</p><p>  f2()</p><p>  print(L)  # 出错 </p><p>  def f3():</p><p>​      L[:] = [3, 4, 5]</p><p>  f3()</p><p>  print(L)  # [3, 4, 5]</p><p>global 语句</p><p>  作用:</p><p>​    告诉解释执行器,global 语句声明的一个或多个变量,这些变量的作用域为模块级作用域(也称作全局变量)</p><p>​    全局声明(global) 将赋值语句的变量映射到模块文件内部的作用域</p><p>  语法:</p><p>​    global 变量1, 变量2, ….</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 此示示意global语句的用法</span><br><span class="line">v = 100</span><br><span class="line">def f1():</span><br><span class="line">    global v  # 全局声明</span><br><span class="line">    v = 200</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">print(&apos;v=&apos;, v)  # ???</span><br><span class="line"></span><br><span class="line">#200</span><br></pre></td></tr></table></figure><p>  说明:</p><p>​    \1. 全局变量如果要在函数内部被赋值,则必须经过全局声明,否则会被认为是局部变量</p><p>​    \2. 全局变量在函数内部不经过全局声明就可以访问(取值)</p><p>​    \3. 不能先声明局部变量,再用global声明为全局变量,此做法不附合规则</p><p>​    \4. global变量列表里的变量名不能出现在函数的形参列表里</p><p>练习:</p><p>  写一个函数hello,部分代码如下:</p><p>​    count = 0</p><p>​    def hello(name):</p><p>​        print(“你好”, name)</p><p>​        … 此处略</p><p>  当调用hello函数时,全局变量count自动做加1操作来记录hello被调用的次数</p><p>  如:</p><p>​    hello(“Tom”)</p><p>​    hello(“Jerry”)</p><p>​    print(“hello函数共被调用%d次” % count)  # 2</p><p>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">count = 0</span><br><span class="line">def hello(name):</span><br><span class="line">    print(&quot;你好&quot;, name)</span><br><span class="line">    </span><br><span class="line">    global count  # 全局声明</span><br><span class="line">    count += 1</span><br><span class="line"></span><br><span class="line">hello(&quot;Tom&quot;)</span><br><span class="line">hello(&quot;Jerry&quot;)</span><br><span class="line">print(&quot;hello函数共被调用%d次&quot; % count)  # 2</span><br><span class="line">hello(&quot;Jerry&quot;)</span><br><span class="line">hello(&quot;Jerry&quot;)</span><br><span class="line">hello(&quot;Jerry&quot;)</span><br><span class="line">hello(&quot;Jerry&quot;)</span><br><span class="line">hello(&quot;Jerry&quot;)</span><br><span class="line">hello(&quot;Jerry&quot;)</span><br><span class="line">print(&quot;hello函数共被调用%d次&quot; % count)  # 8</span><br></pre></td></tr></table></figure><p>nonlocal语句</p><p>  作用:</p><p>​    告诉解释执行器,nonlocal声明的变量不是局部变量,也不是全局变量,而是外部嵌套函数内的变量</p><p>  语法:</p><p>​    nonlocal 变量名1, 变量名2, …</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意nonlocal的用法</span><br><span class="line">var = 100</span><br><span class="line">def f1():</span><br><span class="line">    var = 200</span><br><span class="line">    print(&quot;f1.var=&quot;, var)  # 200</span><br><span class="line"></span><br><span class="line">    def f2():</span><br><span class="line">        nonlocal var</span><br><span class="line">        var = 300  # 想修改f1里的var为300</span><br><span class="line">        print(&quot;f2.var=&quot;, var)  # 300</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">    print(&quot;f1.var=&quot;, var)  # 300</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">print(&quot;全局的var=&quot;, var)</span><br><span class="line"></span><br><span class="line">#f1.var= 200</span><br><span class="line">#f2.var= 300</span><br><span class="line">#f1.var= 300</span><br><span class="line">#全局的var= 100</span><br></pre></td></tr></table></figure><p>  说明:</p><p>​    \1. nonlocal 语句只能在嵌套函数内部进行使用</p><p>​    \2. 对nonlocal变量列表内的变量赋值将对外部嵌套函数作用域内的变量进行操作</p><p>​    \3. 当有两层或两层以上函数嵌套时,访问nonlocal变量只对最近的一层的变量进行操作</p><p>​    \4. nonlocal语句变量列表里的变量名,不能出现在此函数的形参列表中</p><p>问题:</p><p>  def 语句的作用</p><p>lambda 表达式(又名匿名函数)</p><p>  作用:</p><p>​    创建一个匿名函数对象,同def类似,但不提供函数名</p><p>  语法:</p><p>​    lambda [函数形参列表]: 表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># def myadd(x, y):</span><br><span class="line">#     return x + y</span><br><span class="line"></span><br><span class="line"># 可以用lambda改写如下:</span><br><span class="line"># myadd = lambda x, y: x + y</span><br><span class="line">myadd = lambda *args : sum(args)</span><br><span class="line"></span><br><span class="line">print(&quot;20+30=&quot;, myadd(20, 30))  # 50</span><br><span class="line">print(&quot;100+200=&quot;, myadd(100, 200))  # 300</span><br></pre></td></tr></table></figure><p>  说明:</p><p>​    lambda 表达式创建的函数只能包含一条表达式且直接返回表达式的值</p><p>​    lambda 比函数简单,且可以随时创建和销毁,有利于减少程序的偶合度</p><p>​    def xxx ([函数形参列表]):</p><p>​        return  表达式</p><p>练习:</p><p>  \1. 写一个lambda表达式:</p><p>​      fx = lambda n: …</p><p>​    此表达式创建的函数判断n这个数的2次方+1能否被5整除,如果能整除返回True,否则返回False</p><p>​    如:</p><p>​      print(fx(3))  # True</p><p>​      print(fx(4))  # False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># fx = lambda n: (n ** 2 + 1) % 5 == 0</span><br><span class="line">fx = lambda n: True if (n ** 2 + 1) % 5 == 0 else False</span><br><span class="line"></span><br><span class="line">print(fx(3))  # True</span><br><span class="line">print(fx(4))  # False</span><br></pre></td></tr></table></figure><p>  \2. 写一个lambda表达式来创建函数,此函数返回两个形参变量的最大值</p><p>​    def mymax(x, y):</p><p>​        …</p><p>​    </p><p>​    mymax = lambda …</p><p>​    print(mymax(100, 200))  # 200</p><p>​    print(mymax(“ABC”, “123”))  # ABC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># mymax = lambda x, y: max(x, y)</span><br><span class="line">mymax = lambda x, y: x if x &gt; y else y</span><br><span class="line"></span><br><span class="line">print(mymax(100, 200))  # 200</span><br><span class="line">print(mymax(&quot;ABC&quot;, &quot;123&quot;))  # ABC</span><br></pre></td></tr></table></figure><p>eval() 和 exec() 函数</p><p>eval 函数</p><p>  作用:</p><p>​    把一个字符串当表达式来执行,返回表达式执行后的结果 </p><p>  格式:</p><p>​    eval(source, global=None, local=None)</p><p>  示例:</p><p>​    s = “1 + 2 * 3”</p><p>​    v = eval(s)  # v = 7</p><p>​    print(v)  # 7</p><p>​    x = 100</p><p>​    y = 200</p><p>​    s = “x + y”</p><p>​    v = eval(s)  # v = 300</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 此示例示意eval函数的参数的用法</span><br><span class="line">x = 100</span><br><span class="line">y = 200</span><br><span class="line">s = &quot;x + y&quot;</span><br><span class="line">v = eval(s)</span><br><span class="line">print(v)  # 300</span><br><span class="line"></span><br><span class="line"># 假设局部作用域内有 x =1 ; y = 2</span><br><span class="line">v2 = eval(s, None, &#123;&apos;x&apos;:1, &apos;y&apos;: 2&#125;)</span><br><span class="line">print(v2)  # 3</span><br><span class="line"># 设置局部作用域内有y=2,全局作用域: x=10,y=20</span><br><span class="line">v3 = eval(s, &#123;&apos;x&apos;:10, &apos;y&apos;:20&#125;, &#123;&apos;y&apos;:2&#125;)</span><br><span class="line">print(&apos;v3=&apos;, v3)  # 12</span><br></pre></td></tr></table></figure><p>exec 函数</p><p>  作用:</p><p>​    把一个字符串当程序来执行 </p><p>  格式:</p><p>​    exec(source, global=None, local=None)</p><p>  示例:</p><p>​    s = “x=100\ny=200\nprint(‘x+y=’,x+y)”</p><p>​    exec(s)</p><p>​    s = “print(x+y)\nprint(x*y)”</p><p>​    exec(s, {‘x’:10, ‘y’:20}, {‘y’:2})</p><p>练习:</p><p>  \1. 看懂下面的程序在做什么</p><p>​    def fx(f, x, y):</p><p>​        print(f(x, y))</p><p>​    fx((lambda a, b: a + b), 100, 200)</p><p>​    fx((lambda a, b: a**b), 3, 4)</p><p>  \2. 给出一个整数n,写一个函数来计算</p><p>​    1 + 2 + 3 + 4 + … + n 的值并返回结果</p><p>​    要求用函数来做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 方法1</span><br><span class="line"># def mysum(n):</span><br><span class="line">#     s = 0</span><br><span class="line">#     for x in range(1, n + 1):</span><br><span class="line">#         s += x</span><br><span class="line">#     return s</span><br><span class="line"></span><br><span class="line">def mysum(n):</span><br><span class="line">    return sum(range(1, n + 1))</span><br><span class="line"></span><br><span class="line">print(mysum(100))  # 5050</span><br><span class="line">print(mysum(10))  # 55</span><br></pre></td></tr></table></figure><p>  \3. 给出一个整数n,写一个函数来计算n!(n的阶乘))</p><p>​      n! = 1<em>2</em>3<em>4</em>…*n</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def myfac(n):</span><br><span class="line">    s = 1</span><br><span class="line">    for x in range(1, n + 1):</span><br><span class="line">        s *= x</span><br><span class="line">    return s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(myfac(5))  # 120</span><br></pre></td></tr></table></figure><p>  \4. 给出一个整数n,写一个函数来计算</p><p>​        1+2<strong>2+3</strong>3+…+ n**n的和</p><p>​    (n给一个小点的数)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 方法 1</span><br><span class="line"># def f(n):</span><br><span class="line">#     s = 0</span><br><span class="line">#     for x in range(1, n + 1):</span><br><span class="line">#         s += x ** x</span><br><span class="line">#     return s</span><br><span class="line"></span><br><span class="line"># 方法2</span><br><span class="line">def f(n):</span><br><span class="line">    return sum(map(</span><br><span class="line">        lambda x:x**x,</span><br><span class="line">        range(1, n+1)</span><br><span class="line">        ))</span><br><span class="line"></span><br><span class="line">print(&quot;f(2) = &quot;, f(2))</span><br><span class="line">print(&quot;f(5) = &quot;, f(5))</span><br></pre></td></tr></table></figure><p>  \5. 写程序打印杨辉三解(只打印6层)</p><p>​         1</p><p>​        1 1 </p><p>​       1 2 1 </p><p>​      1 3 3 1 </p><p>​     1 4 6 4 1 </p><p>​    1 5 10 10 5 1 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># 第一步,制造相应的列表</span><br><span class="line">def get_next_list(L):</span><br><span class="line">    # 用给定的一行L ,返回下一行</span><br><span class="line">    # 如L为[1, 2, 1] 则返回 [1, 3, 3, 1]</span><br><span class="line">    rl = [1]  # 最左边的1</span><br><span class="line">    # 算中间的数字(循环获取从0开始的索引)</span><br><span class="line">    for i in range(len(L) - 1):</span><br><span class="line">        v = L[i] + L[i + 1]</span><br><span class="line">        rl.append(v)</span><br><span class="line"></span><br><span class="line">    rl.append(1)  # 最右边的1</span><br><span class="line">    return rl</span><br><span class="line"></span><br><span class="line"># 第二步,生成全部的行放到一个整体的列表rl中,并返回</span><br><span class="line">def yh_list(n):  # n为行数</span><br><span class="line">    # 如果 n为3 最终返回的列表是:</span><br><span class="line">    # [[1],[1, 1], [1, 2, 1]]</span><br><span class="line">    rl = []</span><br><span class="line">    L = [1]</span><br><span class="line">    while len(rl) &lt; n:</span><br><span class="line">        rl.append(L) # 加入当前行</span><br><span class="line">        # 计算出下一行准备加入</span><br><span class="line">        L = get_next_list(L)</span><br><span class="line"></span><br><span class="line">    return rl</span><br><span class="line"></span><br><span class="line"># 第三步,把杨辉三解的列表转为字符串列表</span><br><span class="line"># 如果给定的列表是[[1], [1, 1], [1, 2, 1]]</span><br><span class="line"># 返回 [&apos;1&apos;, &apos;1 1&apos;, &apos;1 2 1&apos;]</span><br><span class="line">def get_yh_string(L):</span><br><span class="line">    rl = []</span><br><span class="line">    for line in L:</span><br><span class="line">        # line = [1, 2, 1] -&gt; s = &apos;1 2 1&apos;</span><br><span class="line">        str_lst = [str(x) for x in line]</span><br><span class="line">        # str_lst = [&apos;1&apos;, &apos;2&apos;, &apos;1&apos;]</span><br><span class="line">        s = &apos; &apos;.join(str_lst)</span><br><span class="line">        rl.append(s)</span><br><span class="line">    return rl</span><br><span class="line"></span><br><span class="line"># 打印杨辉三解</span><br><span class="line">def print_yh_triangle(L):</span><br><span class="line">    # L = [&apos;1&apos;, &apos;1 1&apos;, &apos;1 2 1&apos;]</span><br><span class="line">    max_len = len(L[-1])</span><br><span class="line">    for s in L:</span><br><span class="line">        print(s.center(max_len))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L = yh_list(10)</span><br><span class="line">SL = get_yh_string(L)</span><br><span class="line">print_yh_triangle(SL)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;函数-function&quot;&gt;&lt;a href=&quot;#函数-function&quot; class=&quot;headerlink&quot; title=&quot;函数 function&quot;&gt;&lt;/a&gt;函数 function&lt;/h3&gt;&lt;h5 id=&quot;什么是函数&quot;&gt;&lt;a href=&quot;#什么是函数&quot; class=&quot;headerlink&quot; title=&quot;什么是函数&quot;&gt;&lt;/a&gt;什么是函数&lt;/h5&gt;&lt;p&gt;​    函数是可以重复执行的语句块,可以重复的调用&lt;/p&gt;
&lt;p&gt;​    函数是面向过程编程的最小单位&lt;/p&gt;
&lt;p&gt;  作用:&lt;/p&gt;
&lt;p&gt;​    \1. 用于封装语句块,提高代码的重用性&lt;/p&gt;
&lt;p&gt;​    \2. 定义用户级别的函数&lt;/p&gt;
    
    </summary>
    
      <category term="python函数" scheme="http://yoursite.com/categories/python%E5%87%BD%E6%95%B0/"/>
    
    
      <category term="python函数" scheme="http://yoursite.com/tags/python%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>python基础</title>
    <link href="http://yoursite.com/2019/01/05/python%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/01/05/python基础/</id>
    <published>2019-01-05T02:17:28.000Z</published>
    <updated>2019-01-05T04:54:06.668Z</updated>
    
    <content type="html"><![CDATA[<h3 id="lt-lt-Python语言-编程基础-gt-gt"><a href="#lt-lt-Python语言-编程基础-gt-gt" class="headerlink" title="&lt;&lt; Python语言 编程基础 &gt;&gt;"></a><em><u><strong>&lt;&lt; Python语言 编程基础 &gt;&gt;</strong></u></em></h3><h5 id="python简介"><a href="#python简介" class="headerlink" title="python简介"></a>python简介</h5><pre><code>诞生</code></pre><p>​    创建人: Guido Van Rossum</p><p>​    时间: 1989</p><h5 id="python应用领域"><a href="#python应用领域" class="headerlink" title="python应用领域:"></a>python应用领域:</h5><p>​            系统运维,网络编程,科学计算,人工智能,机器人,web开发</p><p>​            云计算,大数据及数据库编程,教育,游戏，图像等</p><a id="more"></a>  <h5 id="Python的优缺点"><a href="#Python的优缺点" class="headerlink" title="Python的优缺点:"></a>Python的优缺点:</h5><p>  优点:</p><blockquote><p>​    面向对象(Java, C++, Python, C#， Swift)</p><p>​    免费</p><p>​    可移植(Windows/Linux/Unix)</p><p>​    可混合编程(C/C++/Java/.net)</p><p>​    简单易学易用</p><p>​    开发效率高</p><p>​    应用领域广泛</p><p>​    开源</p></blockquote><p>  缺点:</p><blockquote><p>​    与C/C++相比，执行速度不够快,不能封闭源代码</p></blockquote><p><strong>python 的官网</strong>:    <a href="https://www.python.org" target="_blank" rel="noopener">https://www.python.org</a></p><p><strong>python的版本:</strong></p><blockquote><p>   ​    Python V2.7 (2020年结束维护)</p><p>   ​    Python V3.5 (当前教学版本)</p><p>   ​    Python V3.8 (最新)</p></blockquote><p>下载地址:    <a href="http://www.python.org/getit" target="_blank" rel="noopener">http://www.python.org/getit</a></p><p><strong>python的安装：</strong>可以安装在Linux/Unix/Windows下</p><h5 id="python-的运行"><a href="#python-的运行" class="headerlink" title="python 的运行"></a>python 的运行</h5><p>  python的解释执行器的类型:</p><p>​            CPython (C语言开发)</p><p>​            Jython (Java开发)</p><p>​            IronPython(.net开发)</p><h5 id="第一个Python程序"><a href="#第一个Python程序" class="headerlink" title="第一个Python程序"></a>第一个Python程序</h5><p>  Visual Studio Code使用</p><p>编写 hello.py</p><p>  写入（左侧不能加空格）:</p><p>​      print(“hello world!”)</p><p>执行程序 :</p><p>  在终端内:</p><p>​    $ python3 文件路径名.py</p><p>python文件的后缀</p><p>  .py       为python语言后缀</p><p>  .c        C语言文件后缀</p><p>  .cpp/.cxx/.cc/.C  C++语言后缀</p><p>  .java     Java语言后缀</p><p>在python的交互模式下编写并执行代码</p><p>  进入交互模式:   $ python3 &lt;回车&gt;</p><p>  退出交互模式:</p><p>​            >&gt;&gt; quit() &lt;回车&gt;</p><p>​            >&gt;&gt; exit() &lt;回车&gt;</p><p>​            >&gt;&gt; &lt;输入ctrl + d&gt;</p><p>python的注释:以 # 开头直至行尾</p><p>  作用:</p><p>​        让注释内容不参加解释执行</p><pre><code>vs code 快捷键: ctrl + /</code></pre><p>python 程序的组成:</p><p>  程序由模块组成</p><p>  模块由语句，函数，类等组成</p><p>  语句包含表达式</p><p>  表达式建立并创建数据对象</p><h5 id="python中自动化内存管理"><a href="#python中自动化内存管理" class="headerlink" title="python中自动化内存管理"></a>python中自动化内存管理</h5><pre><code>a = 1000b = 2000a = a + b  # 释放1000这个对象,a重新绑定在3000上c = a   # c同时绑定在3000上</code></pre><h5 id="在交互模式下，查看当前作用域内的所有变量-gt-gt-help-‘main‘"><a href="#在交互模式下，查看当前作用域内的所有变量-gt-gt-help-‘main‘" class="headerlink" title="在交互模式下，查看当前作用域内的所有变量:>&gt;&gt; help(‘main‘)"></a>在交互模式下，查看当前作用域内的所有变量:>&gt;&gt; help(‘<strong>main</strong>‘)</h5><h4 id="Python的核心数据类型"><a href="#Python的核心数据类型" class="headerlink" title="Python的核心数据类型:"></a>Python的核心数据类型:</h4><p>  数字(整数,浮点型数, 复数，布尔型数(bool)),字符串,列表等</p><h5 id="整型数-int"><a href="#整型数-int" class="headerlink" title="整型数 int"></a>整型数 int</h5><p>  整型数是不带小数部分的数字，包括自然数和负数自然数</p><p>  如: -5, 100, 0等</p><p>整型数的字面值的表示方式:</p><p>  十进制表示</p><p>​    如:</p><p>​      10</p><p>​      200</p><p>​      9999999999999999</p><p>​      -100</p><p>​      0</p><p>  八进制方式表示(0o开头，后跟0~7)</p><p>​    如:</p><p>​      0o177 (127)</p><p>​      0o11  (9)</p><p>  十六进制方式表示(0x开头,后跟0~9,A-F,a-f)</p><p>​    如:</p><p>​      0x11  # (17)</p><p>​      0xFF  # (255)</p><p>​      0x0a  # 10</p><p>​      0x1a2b3c4d </p><p>  二进制表示方式(0b开头，后跟 0~1)</p><p>​    如:</p><p>​      0b0000  # 0</p><p>​      0b0001  # 1</p><p>​      0b0010  # 2</p><p>​      0b01001000  # 72</p><p>进制转换:</p><p>  十进制: 逢十进一</p><p>  二进制: 逢二进一</p><p>  ……</p><h5 id="浮点型数-float"><a href="#浮点型数-float" class="headerlink" title="浮点型数 float"></a>浮点型数 float</h5><p>  浮点数是带有小数部分的数字(小数部分可以为0)</p><p>浮点数字面值的表示方式:</p><p>  小数表示:</p><p>​    如:</p><p>​      3.14   3.1  3.  0.14   .14</p><h5 id="科学计数法"><a href="#科学计数法" class="headerlink" title="科学计数法:"></a>科学计数法:</h5><p>​    格式:</p><p>​      小数 e/E 正负号 指数</p><p>​    如:</p><p>​      6.18E-1  # 等同于0.618</p><p>​      2.9979e8  # 等同于299790000.0</p><p><strong>复数的表示方式:</strong>  complex</p><p>  分为两部分:</p><p>​            实部(real)</p><p>​            虚部(image)</p><p>  如:</p><p>​        1j</p><p>​        1+2j</p><p>​        -2j</p><p>​        (-100+200j)</p><pre><code>注: 虚部以 J 或 j结尾的数</code></pre><h5 id="布尔型数-bool-boolean"><a href="#布尔型数-bool-boolean" class="headerlink" title="布尔型数 bool (boolean)"></a>布尔型数 bool (boolean)</h5><pre><code>用来表示真和假两种状态的类型</code></pre><p>​        True 表示真(条件满足或成立)</p><p>​        False 表示假(条件不满足或不成立)</p><p>  说明:</p><p>​        True 的值为1</p><p>​        False 的值为0</p><h5 id="空值-None"><a href="#空值-None" class="headerlink" title="空值 None"></a>空值 None</h5><p>  None是一个表示不存在的特殊对象</p><p>  作用:</p><p>​    用来占位</p><p>​    变量解除绑定</p><p>表达式和运算符(也叫操作符)</p><h5 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符:"></a>算术运算符:</h5><pre><code> \+  加法 \-  减法*  乘法 /  除法 // 地板除 %  求余   ** 幂运算</code></pre><p>/ 除法</p><p>  除法得到的数是浮点数，不会丢弃小数部分</p><p>  如:</p><p>​        1 / 3  得 0.333333333333333</p><p>​        8 / 2  得 4.0</p><p>// 地板除 floordiv</p><p>  除的结果去掉小数部分向下取整</p><p>  如:</p><pre><code>7 / 3   得 2.33333333333333</code></pre><p>​        7 // 3  得 2</p><p>​        8 // 3  得 2</p><p>​        3.25 // 1.5  # 得 2.0</p><p>% 求余</p><pre><code>7 % 3      得 13.25 % 1.5 得 0.25</code></pre><p>** 幂运算</p><p>  x ** y 表示 x 的 y次方</p><p>  如:</p><p>​        4 ** 2  # 得 16</p><p>​        3.0 ** 4.0  # 得 81.0</p><p>​        5.6 ** 1.418  # 11.506165654866916</p><h5 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级:"></a>运算符的优先级:</h5><pre><code>**\* / % //\+  -</code></pre><p>示例:</p><pre><code>1 + 3 * 3 ** 2 + 4 // 21 + 3 * 9 + 4 // 21 + 27 + 4 // 2 1 + 27 + 2</code></pre><p>​         28 + 2</p><pre><code>30</code></pre><p>括号分组子表达式</p><p>  用() 可以将表达式分组，()内部的表达式先进行计算</p><p>混合类型自动升级</p><p>  1 +2.14 返回类型为浮点数 3.14</p><h5 id="is-is-not-运算符"><a href="#is-is-not-运算符" class="headerlink" title="is / is not 运算符"></a>is / is not 运算符</h5><p>  作用:</p><p>​        判断两个对象是否是同一个对象,当是同一对象时返回True,否则返回False</p><p>  注:</p><p>​        is not 返回值与is 相反</p><p>  语法:</p><p>​        x is y</p><p>​        #  或</p><p>​        x is not y</p><h5 id="id-x-函数"><a href="#id-x-函数" class="headerlink" title="id(x) 函数:"></a>id(x) 函数:</h5><p>  作用:</p><p>​    返回一个对象在内存的中的地址</p><p>  如:</p><p>​        a = 10000</p><p>​        b = 10000</p><p>​        print(id(a))</p><p>​        print(id(b))</p><p>​        print(id(a is b))  # True or False?</p><p>小整数对象池</p><pre><code>CPython中 整数 -5 至 256　的整数永远存在于小整数对象池中，不会释放并一直可用</code></pre><h5 id="复合赋值算术运算符"><a href="#复合赋值算术运算符" class="headerlink" title="复合赋值算术运算符:"></a>复合赋值算术运算符:</h5><pre><code>运算符           说明y += x      等同于 y = y + xy -= x       等同于 y = y - xy *= x      等同于 y = y * xy /= x       等同于 y = y / xy //= x      等同于 y = y // xy %= x      等同于 y = y % x      </code></pre><p>比较运算符:</p><pre><code>&lt; 小于&lt;= 小于等于\&gt; 大于\&gt;= 大于等于== 等于!= 不等于</code></pre><p>  语法:</p><p>​        左表达式 &lt; 右表达式</p><p>  说明:</p><p>​        比较运算符返回布尔类型的值</p><p>  例:</p><p>​        100 &lt; 200 # 返回True</p><p>​        100 &gt;= 200 # 返回False</p><p>  比较运算符的数据表示：0 &lt;= 30 &lt; 100 # </p><h5 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算:"></a>布尔运算:</h5><pre><code>运算符:</code></pre><p>​            not and or</p><h5 id="布尔非操作-not"><a href="#布尔非操作-not" class="headerlink" title="布尔非操作 not"></a>布尔非操作 not</h5><p>  语法:</p><p>​        not x</p><p>  作用:</p><p>​        对x进行布尔取非,如bool(x) 为True,则返回False,否则返回True</p><p>  示例:</p><p>​        not True # False</p><p>​        not False # True</p><p>​        not 0 # True</p><p>​        not 100 # False</p><h5 id="布尔与操作-and"><a href="#布尔与操作-and" class="headerlink" title="布尔与操作 and"></a>布尔与操作 and</h5><p>  语法:</p><p>​        x and y</p><p>​        注: x, 代表表达式</p><p>  作用:</p><p>​        优先返回假值对象,当x的布尔值为False时返回x,否则返回y</p><p>  示例:</p><p>​        True and True # True</p><p>​        True and False # False</p><p>​        False and True # False</p><p>​        False and False # False</p><h5 id="布尔或操作-or"><a href="#布尔或操作-or" class="headerlink" title="布尔或操作 or"></a>布尔或操作 or</h5><p>  语法:</p><p>​        x or y来绑定</p><p>  作用:</p><p>​        优先返回真值对象,如果x为True时返回x,否则返回y</p><p>  示例:</p><p>​        True or True # True</p><p>​        True or False # True</p><p>​        False or True # True</p><p>​        False or False # False</p><h5 id="正负号运算"><a href="#正负号运算" class="headerlink" title="正负号运算"></a>正负号运算</h5><pre><code>+(正号) -(负号)一元运算符(只有一个元素参加运算)</code></pre><p>  示例:</p><p>​            a = 5</p><p>​            b = -a # b = -5</p><p>​            c = +a # c = 5</p><h5 id="数据对象的构造-创建-函数"><a href="#数据对象的构造-创建-函数" class="headerlink" title="数据对象的构造(创建)函数"></a>数据对象的构造(创建)函数</h5><pre><code>float(obj) 用字符串或数字转换为浮点数，如果不给出参数，则返回0int(x,base=10)int(x=0) 用数字或字符串转换为整数，如果不给出参数，则返回0complex(r=0.0, i=0.0) 用数字创建一个复数(实部为r,虚部为i)bool(x) 用x创建一个布尔值(True/False)</code></pre><h5 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h5><pre><code>函数名(传参列表)</code></pre><p>​    说明: 函数调用是表达式，一定会返回一个对象的引用关系(或者返回None)</p><p>bool(x) 返回假值的情况:</p><pre><code>None    空值 False    布尔假值0 0.0 0j  所有的数字0&apos;  &apos;    空字符串(  )    空元组[  ]     空列表{  }    空字典...</code></pre><p>预置(内建)的数值型函数</p><p>  abs(x) 取x的绝对值</p><p>  round(number[,ndigits]) 对数值进行”四舍五入”, ndigits是小数向右取整的位数,负数表示向左取整</p><p>  pow(x, y, z=None) 相当于 x<strong>y 或 x</strong>y%z</p><p>help() 查看函数绑助</p><p>  >&gt;&gt; help(函数名)</p><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><p>  什么是变量</p><p>​        变量是关联一个对象的标识符</p><p>​        变量可以绑定一个对象，并可能通过变量名来使用这个对象</p><p>标识符的命名方法</p><pre><code>标识符必须为字母或下划线开头，后跟字母或下划线或数字不能使用python的关键字变量名区分大小写</code></pre><p>合法的变量名示例:</p><pre><code>a a1 a100  bbbbb hello _abc var A1B2a_b_c</code></pre><p>不合法的变量名示例:</p><pre><code>1a  123  $abc  +a  #abc  True</code></pre><p>python的关键字不能作为变量名:</p><pre><code>True, False, None, is, del, if, while,for ....</code></pre><h5 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h5><pre><code>语法:</code></pre><p>​        变量名 = 表达式</p><p>​        # 或</p><p>​        变量名1 = 变量名2 = 变量名3 = 表达式</p><p>​        # 或</p><p>​        变量名1, 变量名2, … = 数值1, 数值2,…</p><p>  作用:</p><p>​        创建一个变量或修改一个变量绑定的数据</p><p>  说明:</p><p>​        \1. 当变量不存在时，创建该变量，同时将变量绑定在表达式返回的对象上</p><p>​        \2. 当变量存在时，改变此变量绑定的对象</p><p>​        \3. 一个变量只能绑定一个对象</p><p>​        \4. 两个变量可以同时绑定在同一个对象上</p><p>  示例:</p><p>​            pi = 3.1415926</p><p>​            a = 10</p><p>​            b = a  # a和b 同时绑定在一个10上</p><p>python 中关联, 绑定，引用的含义</p><p>  在python中，变量是没有类型</p><p>  关联，绑定，引用都是指变量和一个对象的关联关系</p><p>示例:</p><pre><code>a = 10 + 20a = b = c = 100  # a,b,c三个变量同时绑定在100上a, b, c = 100, 200, 300  # 序列赋值</code></pre><h5 id="序列赋值的语法"><a href="#序列赋值的语法" class="headerlink" title="序列赋值的语法:"></a>序列赋值的语法:</h5><pre><code>变量名1, 变量名2, ... = 对象1, 对象2, ...变量名1, 变量名2, ... = [对象1, 对象2,...]变量名1, 变量名2, ... = (对象1, 对象2,...)</code></pre><h5 id="表达式-expression"><a href="#表达式-expression" class="headerlink" title="表达式  expression"></a>表达式  expression</h5><p>  由一个数字 或 数字和运算符组成</p><p>  作用:</p><p>​        让计算机做事情并返回结果(一定会返回结果)</p><p>  示例:</p><p>​            1</p><p>​            1 + 2  # 返回一个3(创建或生成一个3)</p><h5 id="del-语句"><a href="#del-语句" class="headerlink" title="del 语句"></a>del 语句</h5><p>  作用:</p><p>​        用于删除变量,同时解除与对象的关联关系，如果可能则释放对象</p><p>  语法:</p><p>​        del 变量名1, 变量名2, ….</p><p>自动化内存管理和引用计数</p><p>  每个对象都会记录有几个变量绑定(引用)自身，当引用数量为0时，</p><p>  则此对象被销毁，此种自动化内存管理的方式叫做引用计数</p><p><strong>语句 statement</strong></p><pre><code>语句是python执行的最小单位语句由一些表达式组成,通常一条语句可以独立执行来完成一部分事情并形成结果</code></pre><p>​        (一条语句建议写在一行内),多条语句写在一行内需要用分号(;) 分开</p><p>  示例:</p><pre><code>print(&quot;hello&quot;)</code></pre><p>​        x = 100 + 200</p><p>​        # 写在一起为:</p><p>​        print(“hello”); x = 100 + 200</p><h5 id="语句的显示换行"><a href="#语句的显示换行" class="headerlink" title="语句的显示换行"></a>语句的显示换行</h5><p>  折行符 \ (读作:反斜杠)</p><p>​    折行符必须放在一行的末尾,来示意解释执行器,下一行也是本行的语句</p><h5 id="语句的隐式换行"><a href="#语句的隐式换行" class="headerlink" title="语句的隐式换行"></a>语句的隐式换行</h5><pre><code>所有的括号的内容换行称为隐式换行括号: (  )  [  ]  {  }</code></pre><h5 id="基本输入函数-input"><a href="#基本输入函数-input" class="headerlink" title="基本输入函数 input"></a>基本输入函数 input</h5><p>  作用:</p><p>​        从标准输入设备上(默认为键盘)读取一个字符串</p><p>​        (末尾的换行字符会被删除)</p><p>  格式:</p><p>​        input(‘提示字符串’)</p><p>  说明:</p><p>​        返回输入的字符串(仅python3)</p><p>​        ‘提示字符串’可以省略不写</p><h5 id="基本输出函数print"><a href="#基本输出函数print" class="headerlink" title="基本输出函数print"></a>基本输出函数print</h5><p>  作用:</p><p>​        将一系列的值以字符串形式输出到标准输出设备上(默认是终端)</p><p>  格式:</p><p>​        print(value,…, sep=’ ‘, end=’\n’, file=sys.stdout, flush=False)</p><p>  关键字参数:</p><p>​        sep 两个值之间的分隔符,默认为一个空格’ ‘</p><p>​        sep 输出完毕后在字符流末尾自动追加一个字符串,默认为换行符’\n’</p><p>​        file: 文件流对象，默认为(sys.stdout)</p><p>​        flush: 是否立即进行输出</p><h5 id="python3中常用于序列的函数"><a href="#python3中常用于序列的函数" class="headerlink" title="python3中常用于序列的函数:"></a>python3中常用于序列的函数:</h5><pre><code>len(x) 返回序列长度max(x) 返回序最的最大值元素min(x) 返回序列的最小值元素sum(x) 返回序列中所有元素的和(元素必须是数值类型)any(x) 真值测试,如果序列中其中一个值为真值则返回Trueall(x) 真值测试,如果列表中所有值为真值才返回True</code></pre><p>  示例:</p><p>​            L = [‘One’, 2, ‘三’]</p><p>​            print(len(L)) # 3</p><p>​            L = [8, 3, 6, 2]</p><p>​            min(L) # 2</p><p>​            max(L) # 8</p><p>​            sum(L) # 19</p><p>​            all( [True, 1, 0.01, [1,2,3], “hello”]) # True</p><p>​            all( [None, False, 1, 0.01, [1,2,3], “hello”]) # False</p><p>​            any( [None, False, 0, 0.0, [], ‘’, “hello”]) # True</p><p>​            any( [None, False, 0, 0.0, [], ‘’]) # False</p><h5 id="阶段总结"><a href="#阶段总结" class="headerlink" title="阶段总结:"></a>阶段总结:</h5><p>​     数据类型</p><p>​        不可变数据类型</p><p>​              bool, int, float, complex, str, tuple, frozenset, bytes(字节串)</p><p>​        可变数据类型</p><p>​              list, dict, set, bytearray(字节数组)</p><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符:"></a>运算符:</h5><p>​            +   -   *   /   //   %  **</p><p>​            >   &gt;=   &lt;   &lt;=   ==   !=</p><p>​            is    /    is not</p><p>​            in    /    not in</p><p>​            not    and    or</p><p>​            &amp;    ^     | </p><p>​            +  (正号),  -  (负号)</p><p>​            [  ] 索引/切片</p><h5 id="表达式"><a href="#表达式" class="headerlink" title="表达式:"></a>表达式:</h5><pre><code>11 + 2max(1,2,3) + max(4,5,6)print(&quot;hello&quot;)条件表达式 x if x &gt; y else y</code></pre><p><strong>全部的推导式:</strong> 列表,字典,集合推导式(三种)</p><h5 id="语句"><a href="#语句" class="headerlink" title="语句:"></a>语句:</h5><pre><code> 表达式语句:print(&quot;hello&quot;)赋值语句:a = 100,a = b = c = 200,x, y = 100, 200 del语句,if 语句,while语句,for语句,break语句,continue语句,pass语句</code></pre><h5 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数:"></a>内建函数:</h5><pre><code> \- 用于容器的函数:len(x),max(x),min(x),sum(x),any(x),all(x)\- 构造函数:int(x),bool(x),float(x),complex(x),str(x),list(x),tuple(x),dict(x),set(x),frozenset(x)</code></pre><p>​        - 数值处理函数:abs(x),round(x),pow(x, y, z=None)</p><pre><code> \- 进制字符串:bin(x),oct(x),hex(x) \- 编码转换:chr(x),ord(x) \- 返回可迭代对象的函数:range(start, stop, step),reversed(x)\- 输入输出函数:input(),print(...., sep=&apos; &apos;, end=&apos;\n&apos;) \- 其它:id(x),type(x)</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;lt-lt-Python语言-编程基础-gt-gt&quot;&gt;&lt;a href=&quot;#lt-lt-Python语言-编程基础-gt-gt&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;&amp;lt; Python语言 编程基础 &amp;gt;&amp;gt;&quot;&gt;&lt;/a&gt;&lt;em&gt;&lt;u&gt;&lt;strong&gt;&amp;lt;&amp;lt; Python语言 编程基础 &amp;gt;&amp;gt;&lt;/strong&gt;&lt;/u&gt;&lt;/em&gt;&lt;/h3&gt;&lt;h5 id=&quot;python简介&quot;&gt;&lt;a href=&quot;#python简介&quot; class=&quot;headerlink&quot; title=&quot;python简介&quot;&gt;&lt;/a&gt;python简介&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;诞生
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​    创建人: Guido Van Rossum&lt;/p&gt;
&lt;p&gt;​    时间: 1989&lt;/p&gt;
&lt;h5 id=&quot;python应用领域&quot;&gt;&lt;a href=&quot;#python应用领域&quot; class=&quot;headerlink&quot; title=&quot;python应用领域:&quot;&gt;&lt;/a&gt;python应用领域:&lt;/h5&gt;&lt;p&gt;​            系统运维,网络编程,科学计算,人工智能,机器人,web开发&lt;/p&gt;
&lt;p&gt;​            云计算,大数据及数据库编程,教育,游戏，图像等&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>【持续更新】hexo next主题优化手册</title>
    <link href="http://yoursite.com/2019/01/02/%E3%80%90%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E3%80%91hexo-next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2019/01/02/【持续更新】hexo-next主题优化手册/</id>
    <published>2019-01-02T10:47:09.000Z</published>
    <updated>2019-01-07T00:50:27.087Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/4O4llpT.png" alt=""> <a id="more"></a>           </p><h2 id="hexo常见操作"><a href="#hexo常见操作" class="headerlink" title="hexo常见操作"></a>hexo常见操作</h2><p><code>hexo new &quot;postName&quot;</code> #新建文章<br><code>hexo new page &quot;pageName&quot;</code> #新建页面<br><code>hexo clean</code> #清除部署緩存<br><code>hexo n == hexo new</code> #新建文章<br><code>hexo g == hexo generate</code> #生成静态页面至public目录<br><code>hexo s == hexo server</code> #开启预览访问端口（默认端口4000，可在浏览器输入<code>localhost:4000</code>预览）<br><code>hexo d == hexo deploy</code> #将.deploy目录部署到GitHub<br><code>hexo g -d</code> #生成加部署<br><code>hexo g -s</code> #生成加预览    </p><hr><h1 id="next主题优化"><a href="#next主题优化" class="headerlink" title="next主题优化"></a>next主题优化</h1><h2 id="next风格选择"><a href="#next风格选择" class="headerlink" title="next风格选择"></a>next风格选择</h2><p>next有四种风格,在站点配置文件搜索字段<code>Scheme Settings</code>可以看到，  </p><pre><code># Scheme Settings# ---------------------------------------------------------------# Schemes#scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini</code></pre><p>我这里用的是四种：<code>Gemini</code>     </p><h2 id="next菜单设置"><a href="#next菜单设置" class="headerlink" title="next菜单设置"></a>next菜单设置</h2><p>比如可以看到我的主页有<code>首页</code>、<code>留言</code>、<code>分类</code>、<code>归档</code>、<code>标签</code>等菜单，<br>在站点配置文件下搜索<code>menu:</code>,可以看到   </p><pre><code>menu:  home: / || home  about: /about/ || user  message: /message/ || comment  tags: /tags/ || tags  categories: /categories/ || th  archives: /archives/ || archive  #schedule: /schedule/ || calendar  #sitemap: /sitemap.xml || sitemap  #commonweal: /404/ || heartbeat</code></pre><p><code>home</code>就是<code>首页</code>;<code>message</code>就是<code>留言</code>…一开始只有首页和归档,其余的需要我们手动创建，<br>在站点根目录下打开命令行,输入<code>hexo new page &quot;about&quot;</code><br>并在主题配置文件<code>menu:</code>字段处取消对about的注释<br>重新部署我们就可以看到主页有<code>关于</code>这个菜单了，其他的类似，<br>修改<code>D:\hexoblog\source\about\index.md</code>,就可以修改<code>关于</code>界面了<br><code>about: /about/ || user</code>中的<code>user</code>是指<code>关于</code>菜单附件的图标用的是<a href="https://fontawesome.com/icons?from=io" target="_blank" rel="noopener">图标库</a>里面名为<code>user</code>的图标   </p><h2 id="添加萌妹子动图"><a href="#添加萌妹子动图" class="headerlink" title="添加萌妹子动图"></a>添加萌妹子动图</h2><h3 id="在根目录下打开命令行"><a href="#在根目录下打开命令行" class="headerlink" title="在根目录下打开命令行"></a>在根目录下打开命令行</h3><p>输入<code>npm install --save hexo-helper-live2d</code>   </p><h3 id="修改站点配置文件-注意不是主题配置文件"><a href="#修改站点配置文件-注意不是主题配置文件" class="headerlink" title="修改站点配置文件(注意不是主题配置文件)"></a>修改站点配置文件(注意不是主题配置文件)</h3><p>在末尾加入:    </p><pre><code>live2d:      enable: true      scriptFrom: local      model:</code></pre><p>​            scale: 1<br>​            hHeadPos: 0.5<br>​            vHeadPos: 0.618<br>          display:<br>​            superSample: 2<br>​            width: 150<br>​            height: 300<br>​            position: right<br>​            hOffset: 0<br>​            vOffset: -20<br>         mobile:<br>​            show: false<br>          react:<br>​            opacityDefault: 0.5<br>​            opacityOnHover: 0.</p><h2 id="实现文章首页”分类于”、”阅读次数”等效果"><a href="#实现文章首页”分类于”、”阅读次数”等效果" class="headerlink" title="实现文章首页”分类于”、”阅读次数”等效果"></a>实现文章首页”分类于”、”阅读次数”等效果</h2><p>效果图如下:<br><img src="https://i.imgur.com/sIHtbOe.png" alt="">     </p><h3 id="在根目录下打开命令行-1"><a href="#在根目录下打开命令行-1" class="headerlink" title="在根目录下打开命令行"></a>在根目录下打开命令行</h3><p>依次输入以下命令:<br>​<br>    npm install hexo-wordcount –save<br>    npm uninstall hexo-generator-index –save<br>    npm install hexo-generator-index-pin-top –save   </p><h3 id="打开主题配置文件"><a href="#打开主题配置文件" class="headerlink" title="打开主题配置文件"></a>打开主题配置文件</h3><p>打开相关开关:<br>​<br>    post_wordcount:<br>        item_text: true<br>        wordcount: true<br>        min2read: true<br>        totalcount: true</p><h3 id="打开…-themes-next-layout-macro-post-swig文件"><a href="#打开…-themes-next-layout-macro-post-swig文件" class="headerlink" title="打开…/themes/next/layout/_macro/post.swig文件"></a>打开…/themes/next/layout/_macro/post.swig文件</h3><p>把里面的代码用下面的代码替换:<br><a href="https://pan.baidu.com/s/1W_mDJXS3gDs_iq1aQEZaaA" target="_blank" rel="noopener">点击下载</a>    </p><h3 id="打开…-themes-next-languages-zh-Hans-yml文件"><a href="#打开…-themes-next-languages-zh-Hans-yml文件" class="headerlink" title="打开…/themes/next/languages/zh-Hans.yml文件"></a>打开…/themes/next/languages/zh-Hans.yml文件</h3><p>搜索<code>post</code>字段,添加一行<code>comments: 评论数</code>,注意其余的不要改   </p><h3 id="设置某篇文章置顶"><a href="#设置某篇文章置顶" class="headerlink" title="设置某篇文章置顶"></a>设置某篇文章置顶</h3><p>前面的流程走完后,只需要在写文章的时候在文章前面加入top: true<br>或者top: 100(100只是个例子，数字越大越靠前),就能实现置顶效果了    </p><hr><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="本地预览和同时发布到远程的浏览结果不一致"><a href="#本地预览和同时发布到远程的浏览结果不一致" class="headerlink" title="本地预览和同时发布到远程的浏览结果不一致"></a>本地预览和同时发布到远程的浏览结果不一致</h2><p>这是由缓存造成的,需要先<code>hexo clean</code>,再<code>hexo g -d</code>部署到远程    </p><hr><h1 id="markdown高级语法"><a href="#markdown高级语法" class="headerlink" title="markdown高级语法"></a>markdown高级语法</h1><h2 id="插入连续多行的代码块"><a href="#插入连续多行的代码块" class="headerlink" title="插入连续多行的代码块"></a>插入连续多行的代码块</h2><p>按一个tab键,然后贴代码，保证每一行代码前都要额外的tab键,同时最前面空一行。<br>比如,我前面插入的连续行代码的实现效果:<br><img src="https://i.imgur.com/Z0BCMhF.png" alt="">      </p><h2 id="设置文字大小和颜色和居中效果"><a href="#设置文字大小和颜色和居中效果" class="headerlink" title="设置文字大小和颜色和居中效果"></a>设置文字大小和颜色和居中效果</h2><p>hello,world!    </p><p><font color="#FF0000"> hello,world! </font>    </p><p><font size="5"> hello,world! </font>     </p><p><font size="5" color="#FF0000">hello,world! </font>    </p><p><center>hello,world!</center><br>上面的效果需要在markdwon中的代码是这样的:   </p><pre><code>hello,world!    &lt;font color=&quot;#FF0000&quot;&gt; hello,world! &lt;/font&gt;    &lt;font size=5&gt; hello,world! &lt;/font&gt;     &lt;font size=5 color=&quot;#FF0000&quot;&gt;hello,world! &lt;/font&gt;    &lt;center&gt;hello,world!&lt;/center&gt;    </code></pre><h2 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h2><p>效果图:   </p><table><thead><tr><th style="text-align:left">左对齐标题</th><th style="text-align:right">右对齐标题</th><th style="text-align:center">居中对齐标题</th></tr></thead><tbody><tr><td style="text-align:left">短文本</td><td style="text-align:right">中等文本</td><td style="text-align:center">稍微长一点的文本</td></tr><tr><td style="text-align:left">稍微长一点的文本</td><td style="text-align:right">短文本</td><td style="text-align:center">中等文本</td></tr></tbody></table><p>markdown代码如下：    </p><pre><code>| 左对齐标题 | 右对齐标题 | 居中对齐标题 || :------| ------: | :------: || 短文本 | 中等文本 | 稍微长一点的文本 || 稍微长一点的文本 | 短文本 | 中等文本 |</code></pre><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/4O4llpT.png&quot; alt=&quot;&quot;&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
