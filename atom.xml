<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木木的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-05T04:54:06.668Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>煽情小飞侠</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python基础</title>
    <link href="http://yoursite.com/2019/01/05/python%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/01/05/python基础/</id>
    <published>2019-01-05T02:17:28.000Z</published>
    <updated>2019-01-05T04:54:06.668Z</updated>
    
    <content type="html"><![CDATA[<h3 id="lt-lt-Python语言-编程基础-gt-gt"><a href="#lt-lt-Python语言-编程基础-gt-gt" class="headerlink" title="&lt;&lt; Python语言 编程基础 &gt;&gt;"></a><em><u><strong>&lt;&lt; Python语言 编程基础 &gt;&gt;</strong></u></em></h3><h5 id="python简介"><a href="#python简介" class="headerlink" title="python简介"></a>python简介</h5><pre><code>诞生</code></pre><p>​    创建人: Guido Van Rossum</p><p>​    时间: 1989</p><h5 id="python应用领域"><a href="#python应用领域" class="headerlink" title="python应用领域:"></a>python应用领域:</h5><p>​            系统运维,网络编程,科学计算,人工智能,机器人,web开发</p><p>​            云计算,大数据及数据库编程,教育,游戏，图像等</p><a id="more"></a>  <h5 id="Python的优缺点"><a href="#Python的优缺点" class="headerlink" title="Python的优缺点:"></a>Python的优缺点:</h5><p>  优点:</p><blockquote><p>​    面向对象(Java, C++, Python, C#， Swift)</p><p>​    免费</p><p>​    可移植(Windows/Linux/Unix)</p><p>​    可混合编程(C/C++/Java/.net)</p><p>​    简单易学易用</p><p>​    开发效率高</p><p>​    应用领域广泛</p><p>​    开源</p></blockquote><p>  缺点:</p><blockquote><p>​    与C/C++相比，执行速度不够快,不能封闭源代码</p></blockquote><p><strong>python 的官网</strong>:    <a href="https://www.python.org" target="_blank" rel="noopener">https://www.python.org</a></p><p><strong>python的版本:</strong></p><blockquote><p>   ​    Python V2.7 (2020年结束维护)</p><p>   ​    Python V3.5 (当前教学版本)</p><p>   ​    Python V3.8 (最新)</p></blockquote><p>下载地址:    <a href="http://www.python.org/getit" target="_blank" rel="noopener">http://www.python.org/getit</a></p><p><strong>python的安装：</strong>可以安装在Linux/Unix/Windows下</p><h5 id="python-的运行"><a href="#python-的运行" class="headerlink" title="python 的运行"></a>python 的运行</h5><p>  python的解释执行器的类型:</p><p>​            CPython (C语言开发)</p><p>​            Jython (Java开发)</p><p>​            IronPython(.net开发)</p><h5 id="第一个Python程序"><a href="#第一个Python程序" class="headerlink" title="第一个Python程序"></a>第一个Python程序</h5><p>  Visual Studio Code使用</p><p>编写 hello.py</p><p>  写入（左侧不能加空格）:</p><p>​      print(“hello world!”)</p><p>执行程序 :</p><p>  在终端内:</p><p>​    $ python3 文件路径名.py</p><p>python文件的后缀</p><p>  .py       为python语言后缀</p><p>  .c        C语言文件后缀</p><p>  .cpp/.cxx/.cc/.C  C++语言后缀</p><p>  .java     Java语言后缀</p><p>在python的交互模式下编写并执行代码</p><p>  进入交互模式:   $ python3 &lt;回车&gt;</p><p>  退出交互模式:</p><p>​            >&gt;&gt; quit() &lt;回车&gt;</p><p>​            >&gt;&gt; exit() &lt;回车&gt;</p><p>​            >&gt;&gt; &lt;输入ctrl + d&gt;</p><p>python的注释:以 # 开头直至行尾</p><p>  作用:</p><p>​        让注释内容不参加解释执行</p><pre><code>vs code 快捷键: ctrl + /</code></pre><p>python 程序的组成:</p><p>  程序由模块组成</p><p>  模块由语句，函数，类等组成</p><p>  语句包含表达式</p><p>  表达式建立并创建数据对象</p><h5 id="python中自动化内存管理"><a href="#python中自动化内存管理" class="headerlink" title="python中自动化内存管理"></a>python中自动化内存管理</h5><pre><code>a = 1000b = 2000a = a + b  # 释放1000这个对象,a重新绑定在3000上c = a   # c同时绑定在3000上</code></pre><h5 id="在交互模式下，查看当前作用域内的所有变量-gt-gt-help-‘main‘"><a href="#在交互模式下，查看当前作用域内的所有变量-gt-gt-help-‘main‘" class="headerlink" title="在交互模式下，查看当前作用域内的所有变量:>&gt;&gt; help(‘main‘)"></a>在交互模式下，查看当前作用域内的所有变量:>&gt;&gt; help(‘<strong>main</strong>‘)</h5><h4 id="Python的核心数据类型"><a href="#Python的核心数据类型" class="headerlink" title="Python的核心数据类型:"></a>Python的核心数据类型:</h4><p>  数字(整数,浮点型数, 复数，布尔型数(bool)),字符串,列表等</p><h5 id="整型数-int"><a href="#整型数-int" class="headerlink" title="整型数 int"></a>整型数 int</h5><p>  整型数是不带小数部分的数字，包括自然数和负数自然数</p><p>  如: -5, 100, 0等</p><p>整型数的字面值的表示方式:</p><p>  十进制表示</p><p>​    如:</p><p>​      10</p><p>​      200</p><p>​      9999999999999999</p><p>​      -100</p><p>​      0</p><p>  八进制方式表示(0o开头，后跟0~7)</p><p>​    如:</p><p>​      0o177 (127)</p><p>​      0o11  (9)</p><p>  十六进制方式表示(0x开头,后跟0~9,A-F,a-f)</p><p>​    如:</p><p>​      0x11  # (17)</p><p>​      0xFF  # (255)</p><p>​      0x0a  # 10</p><p>​      0x1a2b3c4d </p><p>  二进制表示方式(0b开头，后跟 0~1)</p><p>​    如:</p><p>​      0b0000  # 0</p><p>​      0b0001  # 1</p><p>​      0b0010  # 2</p><p>​      0b01001000  # 72</p><p>进制转换:</p><p>  十进制: 逢十进一</p><p>  二进制: 逢二进一</p><p>  ……</p><h5 id="浮点型数-float"><a href="#浮点型数-float" class="headerlink" title="浮点型数 float"></a>浮点型数 float</h5><p>  浮点数是带有小数部分的数字(小数部分可以为0)</p><p>浮点数字面值的表示方式:</p><p>  小数表示:</p><p>​    如:</p><p>​      3.14   3.1  3.  0.14   .14</p><h5 id="科学计数法"><a href="#科学计数法" class="headerlink" title="科学计数法:"></a>科学计数法:</h5><p>​    格式:</p><p>​      小数 e/E 正负号 指数</p><p>​    如:</p><p>​      6.18E-1  # 等同于0.618</p><p>​      2.9979e8  # 等同于299790000.0</p><p><strong>复数的表示方式:</strong>  complex</p><p>  分为两部分:</p><p>​            实部(real)</p><p>​            虚部(image)</p><p>  如:</p><p>​        1j</p><p>​        1+2j</p><p>​        -2j</p><p>​        (-100+200j)</p><pre><code>注: 虚部以 J 或 j结尾的数</code></pre><h5 id="布尔型数-bool-boolean"><a href="#布尔型数-bool-boolean" class="headerlink" title="布尔型数 bool (boolean)"></a>布尔型数 bool (boolean)</h5><pre><code>用来表示真和假两种状态的类型</code></pre><p>​        True 表示真(条件满足或成立)</p><p>​        False 表示假(条件不满足或不成立)</p><p>  说明:</p><p>​        True 的值为1</p><p>​        False 的值为0</p><h5 id="空值-None"><a href="#空值-None" class="headerlink" title="空值 None"></a>空值 None</h5><p>  None是一个表示不存在的特殊对象</p><p>  作用:</p><p>​    用来占位</p><p>​    变量解除绑定</p><p>表达式和运算符(也叫操作符)</p><h5 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符:"></a>算术运算符:</h5><pre><code> \+  加法 \-  减法*  乘法 /  除法 // 地板除 %  求余   ** 幂运算</code></pre><p>/ 除法</p><p>  除法得到的数是浮点数，不会丢弃小数部分</p><p>  如:</p><p>​        1 / 3  得 0.333333333333333</p><p>​        8 / 2  得 4.0</p><p>// 地板除 floordiv</p><p>  除的结果去掉小数部分向下取整</p><p>  如:</p><pre><code>7 / 3   得 2.33333333333333</code></pre><p>​        7 // 3  得 2</p><p>​        8 // 3  得 2</p><p>​        3.25 // 1.5  # 得 2.0</p><p>% 求余</p><pre><code>7 % 3      得 13.25 % 1.5 得 0.25</code></pre><p>** 幂运算</p><p>  x ** y 表示 x 的 y次方</p><p>  如:</p><p>​        4 ** 2  # 得 16</p><p>​        3.0 ** 4.0  # 得 81.0</p><p>​        5.6 ** 1.418  # 11.506165654866916</p><h5 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级:"></a>运算符的优先级:</h5><pre><code>**\* / % //\+  -</code></pre><p>示例:</p><pre><code>1 + 3 * 3 ** 2 + 4 // 21 + 3 * 9 + 4 // 21 + 27 + 4 // 2 1 + 27 + 2</code></pre><p>​         28 + 2</p><pre><code>30</code></pre><p>括号分组子表达式</p><p>  用() 可以将表达式分组，()内部的表达式先进行计算</p><p>混合类型自动升级</p><p>  1 +2.14 返回类型为浮点数 3.14</p><h5 id="is-is-not-运算符"><a href="#is-is-not-运算符" class="headerlink" title="is / is not 运算符"></a>is / is not 运算符</h5><p>  作用:</p><p>​        判断两个对象是否是同一个对象,当是同一对象时返回True,否则返回False</p><p>  注:</p><p>​        is not 返回值与is 相反</p><p>  语法:</p><p>​        x is y</p><p>​        #  或</p><p>​        x is not y</p><h5 id="id-x-函数"><a href="#id-x-函数" class="headerlink" title="id(x) 函数:"></a>id(x) 函数:</h5><p>  作用:</p><p>​    返回一个对象在内存的中的地址</p><p>  如:</p><p>​        a = 10000</p><p>​        b = 10000</p><p>​        print(id(a))</p><p>​        print(id(b))</p><p>​        print(id(a is b))  # True or False?</p><p>小整数对象池</p><pre><code>CPython中 整数 -5 至 256　的整数永远存在于小整数对象池中，不会释放并一直可用</code></pre><h5 id="复合赋值算术运算符"><a href="#复合赋值算术运算符" class="headerlink" title="复合赋值算术运算符:"></a>复合赋值算术运算符:</h5><pre><code>运算符           说明y += x      等同于 y = y + xy -= x       等同于 y = y - xy *= x      等同于 y = y * xy /= x       等同于 y = y / xy //= x      等同于 y = y // xy %= x      等同于 y = y % x      </code></pre><p>比较运算符:</p><pre><code>&lt; 小于&lt;= 小于等于\&gt; 大于\&gt;= 大于等于== 等于!= 不等于</code></pre><p>  语法:</p><p>​        左表达式 &lt; 右表达式</p><p>  说明:</p><p>​        比较运算符返回布尔类型的值</p><p>  例:</p><p>​        100 &lt; 200 # 返回True</p><p>​        100 &gt;= 200 # 返回False</p><p>  比较运算符的数据表示：0 &lt;= 30 &lt; 100 # </p><h5 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算:"></a>布尔运算:</h5><pre><code>运算符:</code></pre><p>​            not and or</p><h5 id="布尔非操作-not"><a href="#布尔非操作-not" class="headerlink" title="布尔非操作 not"></a>布尔非操作 not</h5><p>  语法:</p><p>​        not x</p><p>  作用:</p><p>​        对x进行布尔取非,如bool(x) 为True,则返回False,否则返回True</p><p>  示例:</p><p>​        not True # False</p><p>​        not False # True</p><p>​        not 0 # True</p><p>​        not 100 # False</p><h5 id="布尔与操作-and"><a href="#布尔与操作-and" class="headerlink" title="布尔与操作 and"></a>布尔与操作 and</h5><p>  语法:</p><p>​        x and y</p><p>​        注: x, 代表表达式</p><p>  作用:</p><p>​        优先返回假值对象,当x的布尔值为False时返回x,否则返回y</p><p>  示例:</p><p>​        True and True # True</p><p>​        True and False # False</p><p>​        False and True # False</p><p>​        False and False # False</p><h5 id="布尔或操作-or"><a href="#布尔或操作-or" class="headerlink" title="布尔或操作 or"></a>布尔或操作 or</h5><p>  语法:</p><p>​        x or y来绑定</p><p>  作用:</p><p>​        优先返回真值对象,如果x为True时返回x,否则返回y</p><p>  示例:</p><p>​        True or True # True</p><p>​        True or False # True</p><p>​        False or True # True</p><p>​        False or False # False</p><h5 id="正负号运算"><a href="#正负号运算" class="headerlink" title="正负号运算"></a>正负号运算</h5><pre><code>+(正号) -(负号)一元运算符(只有一个元素参加运算)</code></pre><p>  示例:</p><p>​            a = 5</p><p>​            b = -a # b = -5</p><p>​            c = +a # c = 5</p><h5 id="数据对象的构造-创建-函数"><a href="#数据对象的构造-创建-函数" class="headerlink" title="数据对象的构造(创建)函数"></a>数据对象的构造(创建)函数</h5><pre><code>float(obj) 用字符串或数字转换为浮点数，如果不给出参数，则返回0int(x,base=10)int(x=0) 用数字或字符串转换为整数，如果不给出参数，则返回0complex(r=0.0, i=0.0) 用数字创建一个复数(实部为r,虚部为i)bool(x) 用x创建一个布尔值(True/False)</code></pre><h5 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h5><pre><code>函数名(传参列表)</code></pre><p>​    说明: 函数调用是表达式，一定会返回一个对象的引用关系(或者返回None)</p><p>bool(x) 返回假值的情况:</p><pre><code>None    空值 False    布尔假值0 0.0 0j  所有的数字0&apos;  &apos;    空字符串(  )    空元组[  ]     空列表{  }    空字典...</code></pre><p>预置(内建)的数值型函数</p><p>  abs(x) 取x的绝对值</p><p>  round(number[,ndigits]) 对数值进行”四舍五入”, ndigits是小数向右取整的位数,负数表示向左取整</p><p>  pow(x, y, z=None) 相当于 x<strong>y 或 x</strong>y%z</p><p>help() 查看函数绑助</p><p>  >&gt;&gt; help(函数名)</p><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><p>  什么是变量</p><p>​        变量是关联一个对象的标识符</p><p>​        变量可以绑定一个对象，并可能通过变量名来使用这个对象</p><p>标识符的命名方法</p><pre><code>标识符必须为字母或下划线开头，后跟字母或下划线或数字不能使用python的关键字变量名区分大小写</code></pre><p>合法的变量名示例:</p><pre><code>a a1 a100  bbbbb hello _abc var A1B2a_b_c</code></pre><p>不合法的变量名示例:</p><pre><code>1a  123  $abc  +a  #abc  True</code></pre><p>python的关键字不能作为变量名:</p><pre><code>True, False, None, is, del, if, while,for ....</code></pre><h5 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h5><pre><code>语法:</code></pre><p>​        变量名 = 表达式</p><p>​        # 或</p><p>​        变量名1 = 变量名2 = 变量名3 = 表达式</p><p>​        # 或</p><p>​        变量名1, 变量名2, … = 数值1, 数值2,…</p><p>  作用:</p><p>​        创建一个变量或修改一个变量绑定的数据</p><p>  说明:</p><p>​        \1. 当变量不存在时，创建该变量，同时将变量绑定在表达式返回的对象上</p><p>​        \2. 当变量存在时，改变此变量绑定的对象</p><p>​        \3. 一个变量只能绑定一个对象</p><p>​        \4. 两个变量可以同时绑定在同一个对象上</p><p>  示例:</p><p>​            pi = 3.1415926</p><p>​            a = 10</p><p>​            b = a  # a和b 同时绑定在一个10上</p><p>python 中关联, 绑定，引用的含义</p><p>  在python中，变量是没有类型</p><p>  关联，绑定，引用都是指变量和一个对象的关联关系</p><p>示例:</p><pre><code>a = 10 + 20a = b = c = 100  # a,b,c三个变量同时绑定在100上a, b, c = 100, 200, 300  # 序列赋值</code></pre><h5 id="序列赋值的语法"><a href="#序列赋值的语法" class="headerlink" title="序列赋值的语法:"></a>序列赋值的语法:</h5><pre><code>变量名1, 变量名2, ... = 对象1, 对象2, ...变量名1, 变量名2, ... = [对象1, 对象2,...]变量名1, 变量名2, ... = (对象1, 对象2,...)</code></pre><h5 id="表达式-expression"><a href="#表达式-expression" class="headerlink" title="表达式  expression"></a>表达式  expression</h5><p>  由一个数字 或 数字和运算符组成</p><p>  作用:</p><p>​        让计算机做事情并返回结果(一定会返回结果)</p><p>  示例:</p><p>​            1</p><p>​            1 + 2  # 返回一个3(创建或生成一个3)</p><h5 id="del-语句"><a href="#del-语句" class="headerlink" title="del 语句"></a>del 语句</h5><p>  作用:</p><p>​        用于删除变量,同时解除与对象的关联关系，如果可能则释放对象</p><p>  语法:</p><p>​        del 变量名1, 变量名2, ….</p><p>自动化内存管理和引用计数</p><p>  每个对象都会记录有几个变量绑定(引用)自身，当引用数量为0时，</p><p>  则此对象被销毁，此种自动化内存管理的方式叫做引用计数</p><p><strong>语句 statement</strong></p><pre><code>语句是python执行的最小单位语句由一些表达式组成,通常一条语句可以独立执行来完成一部分事情并形成结果</code></pre><p>​        (一条语句建议写在一行内),多条语句写在一行内需要用分号(;) 分开</p><p>  示例:</p><pre><code>print(&quot;hello&quot;)</code></pre><p>​        x = 100 + 200</p><p>​        # 写在一起为:</p><p>​        print(“hello”); x = 100 + 200</p><h5 id="语句的显示换行"><a href="#语句的显示换行" class="headerlink" title="语句的显示换行"></a>语句的显示换行</h5><p>  折行符 \ (读作:反斜杠)</p><p>​    折行符必须放在一行的末尾,来示意解释执行器,下一行也是本行的语句</p><h5 id="语句的隐式换行"><a href="#语句的隐式换行" class="headerlink" title="语句的隐式换行"></a>语句的隐式换行</h5><pre><code>所有的括号的内容换行称为隐式换行括号: (  )  [  ]  {  }</code></pre><h5 id="基本输入函数-input"><a href="#基本输入函数-input" class="headerlink" title="基本输入函数 input"></a>基本输入函数 input</h5><p>  作用:</p><p>​        从标准输入设备上(默认为键盘)读取一个字符串</p><p>​        (末尾的换行字符会被删除)</p><p>  格式:</p><p>​        input(‘提示字符串’)</p><p>  说明:</p><p>​        返回输入的字符串(仅python3)</p><p>​        ‘提示字符串’可以省略不写</p><h5 id="基本输出函数print"><a href="#基本输出函数print" class="headerlink" title="基本输出函数print"></a>基本输出函数print</h5><p>  作用:</p><p>​        将一系列的值以字符串形式输出到标准输出设备上(默认是终端)</p><p>  格式:</p><p>​        print(value,…, sep=’ ‘, end=’\n’, file=sys.stdout, flush=False)</p><p>  关键字参数:</p><p>​        sep 两个值之间的分隔符,默认为一个空格’ ‘</p><p>​        sep 输出完毕后在字符流末尾自动追加一个字符串,默认为换行符’\n’</p><p>​        file: 文件流对象，默认为(sys.stdout)</p><p>​        flush: 是否立即进行输出</p><h5 id="python3中常用于序列的函数"><a href="#python3中常用于序列的函数" class="headerlink" title="python3中常用于序列的函数:"></a>python3中常用于序列的函数:</h5><pre><code>len(x) 返回序列长度max(x) 返回序最的最大值元素min(x) 返回序列的最小值元素sum(x) 返回序列中所有元素的和(元素必须是数值类型)any(x) 真值测试,如果序列中其中一个值为真值则返回Trueall(x) 真值测试,如果列表中所有值为真值才返回True</code></pre><p>  示例:</p><p>​            L = [‘One’, 2, ‘三’]</p><p>​            print(len(L)) # 3</p><p>​            L = [8, 3, 6, 2]</p><p>​            min(L) # 2</p><p>​            max(L) # 8</p><p>​            sum(L) # 19</p><p>​            all( [True, 1, 0.01, [1,2,3], “hello”]) # True</p><p>​            all( [None, False, 1, 0.01, [1,2,3], “hello”]) # False</p><p>​            any( [None, False, 0, 0.0, [], ‘’, “hello”]) # True</p><p>​            any( [None, False, 0, 0.0, [], ‘’]) # False</p><h5 id="阶段总结"><a href="#阶段总结" class="headerlink" title="阶段总结:"></a>阶段总结:</h5><p>​     数据类型</p><p>​        不可变数据类型</p><p>​              bool, int, float, complex, str, tuple, frozenset, bytes(字节串)</p><p>​        可变数据类型</p><p>​              list, dict, set, bytearray(字节数组)</p><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符:"></a>运算符:</h5><p>​            +   -   *   /   //   %  **</p><p>​            >   &gt;=   &lt;   &lt;=   ==   !=</p><p>​            is    /    is not</p><p>​            in    /    not in</p><p>​            not    and    or</p><p>​            &amp;    ^     | </p><p>​            +  (正号),  -  (负号)</p><p>​            [  ] 索引/切片</p><h5 id="表达式"><a href="#表达式" class="headerlink" title="表达式:"></a>表达式:</h5><pre><code>11 + 2max(1,2,3) + max(4,5,6)print(&quot;hello&quot;)条件表达式 x if x &gt; y else y</code></pre><p><strong>全部的推导式:</strong> 列表,字典,集合推导式(三种)</p><h5 id="语句"><a href="#语句" class="headerlink" title="语句:"></a>语句:</h5><pre><code> 表达式语句:print(&quot;hello&quot;)赋值语句:a = 100,a = b = c = 200,x, y = 100, 200 del语句,if 语句,while语句,for语句,break语句,continue语句,pass语句</code></pre><h5 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数:"></a>内建函数:</h5><pre><code> \- 用于容器的函数:len(x),max(x),min(x),sum(x),any(x),all(x)\- 构造函数:int(x),bool(x),float(x),complex(x),str(x),list(x),tuple(x),dict(x),set(x),frozenset(x)</code></pre><p>​        - 数值处理函数:abs(x),round(x),pow(x, y, z=None)</p><pre><code> \- 进制字符串:bin(x),oct(x),hex(x) \- 编码转换:chr(x),ord(x) \- 返回可迭代对象的函数:range(start, stop, step),reversed(x)\- 输入输出函数:input(),print(...., sep=&apos; &apos;, end=&apos;\n&apos;) \- 其它:id(x),type(x)</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;lt-lt-Python语言-编程基础-gt-gt&quot;&gt;&lt;a href=&quot;#lt-lt-Python语言-编程基础-gt-gt&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;&amp;lt; Python语言 编程基础 &amp;gt;&amp;gt;&quot;&gt;&lt;/a&gt;&lt;em&gt;&lt;u&gt;&lt;strong&gt;&amp;lt;&amp;lt; Python语言 编程基础 &amp;gt;&amp;gt;&lt;/strong&gt;&lt;/u&gt;&lt;/em&gt;&lt;/h3&gt;&lt;h5 id=&quot;python简介&quot;&gt;&lt;a href=&quot;#python简介&quot; class=&quot;headerlink&quot; title=&quot;python简介&quot;&gt;&lt;/a&gt;python简介&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;诞生
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​    创建人: Guido Van Rossum&lt;/p&gt;
&lt;p&gt;​    时间: 1989&lt;/p&gt;
&lt;h5 id=&quot;python应用领域&quot;&gt;&lt;a href=&quot;#python应用领域&quot; class=&quot;headerlink&quot; title=&quot;python应用领域:&quot;&gt;&lt;/a&gt;python应用领域:&lt;/h5&gt;&lt;p&gt;​            系统运维,网络编程,科学计算,人工智能,机器人,web开发&lt;/p&gt;
&lt;p&gt;​            云计算,大数据及数据库编程,教育,游戏，图像等&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>【持续更新】hexo next主题优化手册</title>
    <link href="http://yoursite.com/2019/01/02/%E3%80%90%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E3%80%91hexo-next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2019/01/02/【持续更新】hexo-next主题优化手册/</id>
    <published>2019-01-02T10:47:09.000Z</published>
    <updated>2019-01-02T10:58:00.322Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/4O4llpT.png" alt=""> <a id="more"></a>           </p><h2 id="hexo常见操作"><a href="#hexo常见操作" class="headerlink" title="hexo常见操作"></a>hexo常见操作</h2><p><code>hexo new &quot;postName&quot;</code> #新建文章<br><code>hexo new page &quot;pageName&quot;</code> #新建页面<br><code>hexo clean</code> #清除部署緩存<br><code>hexo n == hexo new</code> #新建文章<br><code>hexo g == hexo generate</code> #生成静态页面至public目录<br><code>hexo s == hexo server</code> #开启预览访问端口（默认端口4000，可在浏览器输入<code>localhost:4000</code>预览）<br><code>hexo d == hexo deploy</code> #将.deploy目录部署到GitHub<br><code>hexo g -d</code> #生成加部署<br><code>hexo g -s</code> #生成加预览    </p><hr><h1 id="next主题优化"><a href="#next主题优化" class="headerlink" title="next主题优化"></a>next主题优化</h1><h2 id="next风格选择"><a href="#next风格选择" class="headerlink" title="next风格选择"></a>next风格选择</h2><p>next有四种风格,在站点配置文件搜索字段<code>Scheme Settings</code>可以看到，  </p><pre><code># Scheme Settings# ---------------------------------------------------------------# Schemes#scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini</code></pre><p>我这里用的是四种：<code>Gemini</code>     </p><h2 id="next菜单设置"><a href="#next菜单设置" class="headerlink" title="next菜单设置"></a>next菜单设置</h2><p>比如可以看到我的主页有<code>首页</code>、<code>留言</code>、<code>分类</code>、<code>归档</code>、<code>标签</code>等菜单，<br>在站点配置文件下搜索<code>menu:</code>,可以看到   </p><pre><code>menu:  home: / || home  about: /about/ || user  message: /message/ || comment  tags: /tags/ || tags  categories: /categories/ || th  archives: /archives/ || archive  #schedule: /schedule/ || calendar  #sitemap: /sitemap.xml || sitemap  #commonweal: /404/ || heartbeat</code></pre><p><code>home</code>就是<code>首页</code>;<code>message</code>就是<code>留言</code>…一开始只有首页和归档,其余的需要我们手动创建，<br>在站点根目录下打开命令行,输入<code>hexo new page &quot;about&quot;</code><br>并在主题配置文件<code>menu:</code>字段处取消对about的注释<br>重新部署我们就可以看到主页有<code>关于</code>这个菜单了，其他的类似，<br>修改<code>D:\hexoblog\source\about\index.md</code>,就可以修改<code>关于</code>界面了<br><code>about: /about/ || user</code>中的<code>user</code>是指<code>关于</code>菜单附件的图标用的是<a href="https://fontawesome.com/icons?from=io" target="_blank" rel="noopener">图标库</a>里面名为<code>user</code>的图标   </p><h2 id="添加萌妹子动图"><a href="#添加萌妹子动图" class="headerlink" title="添加萌妹子动图"></a>添加萌妹子动图</h2><h3 id="在根目录下打开命令行"><a href="#在根目录下打开命令行" class="headerlink" title="在根目录下打开命令行"></a>在根目录下打开命令行</h3><p>输入<code>npm install --save hexo-helper-live2d</code>   </p><h3 id="修改站点配置文件-注意不是主题配置文件"><a href="#修改站点配置文件-注意不是主题配置文件" class="headerlink" title="修改站点配置文件(注意不是主题配置文件)"></a>修改站点配置文件(注意不是主题配置文件)</h3><p>在末尾加入:    </p><pre><code>live2d:      enable: true      scriptFrom: local      model:        scale: 1        hHeadPos: 0.5        vHeadPos: 0.618      display:        superSample: 2        width: 150        height: 300        position: right        hOffset: 0        vOffset: -20     mobile:        show: false      react:        opacityDefault: 0.5        opacityOnHover: 0.</code></pre><h2 id="实现文章首页”分类于”、”阅读次数”等效果"><a href="#实现文章首页”分类于”、”阅读次数”等效果" class="headerlink" title="实现文章首页”分类于”、”阅读次数”等效果"></a>实现文章首页”分类于”、”阅读次数”等效果</h2><p>效果图如下:<br><img src="https://i.imgur.com/sIHtbOe.png" alt="">     </p><h3 id="在根目录下打开命令行-1"><a href="#在根目录下打开命令行-1" class="headerlink" title="在根目录下打开命令行"></a>在根目录下打开命令行</h3><p>依次输入以下命令:    </p><pre><code>npm install hexo-wordcount --savenpm uninstall hexo-generator-index --savenpm install hexo-generator-index-pin-top --save   </code></pre><h3 id="打开主题配置文件"><a href="#打开主题配置文件" class="headerlink" title="打开主题配置文件"></a>打开主题配置文件</h3><p>打开相关开关:   </p><pre><code>post_wordcount:    item_text: true    wordcount: true    min2read: true    totalcount: true</code></pre><h3 id="打开…-themes-next-layout-macro-post-swig文件"><a href="#打开…-themes-next-layout-macro-post-swig文件" class="headerlink" title="打开…/themes/next/layout/_macro/post.swig文件"></a>打开…/themes/next/layout/_macro/post.swig文件</h3><p>把里面的代码用下面的代码替换:<br><a href="https://pan.baidu.com/s/1W_mDJXS3gDs_iq1aQEZaaA" target="_blank" rel="noopener">点击下载</a>    </p><h3 id="打开…-themes-next-languages-zh-Hans-yml文件"><a href="#打开…-themes-next-languages-zh-Hans-yml文件" class="headerlink" title="打开…/themes/next/languages/zh-Hans.yml文件"></a>打开…/themes/next/languages/zh-Hans.yml文件</h3><p>搜索<code>post</code>字段,添加一行<code>comments: 评论数</code>,注意其余的不要改   </p><h3 id="设置某篇文章置顶"><a href="#设置某篇文章置顶" class="headerlink" title="设置某篇文章置顶"></a>设置某篇文章置顶</h3><p>前面的流程走完后,只需要在写文章的时候在文章前面加入top: true<br>或者top: 100(100只是个例子，数字越大越靠前),就能实现置顶效果了    </p><hr><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="本地预览和同时发布到远程的浏览结果不一致"><a href="#本地预览和同时发布到远程的浏览结果不一致" class="headerlink" title="本地预览和同时发布到远程的浏览结果不一致"></a>本地预览和同时发布到远程的浏览结果不一致</h2><p>这是由缓存造成的,需要先<code>hexo clean</code>,再<code>hexo g -d</code>部署到远程    </p><hr><h1 id="markdown高级语法"><a href="#markdown高级语法" class="headerlink" title="markdown高级语法"></a>markdown高级语法</h1><h2 id="插入连续多行的代码块"><a href="#插入连续多行的代码块" class="headerlink" title="插入连续多行的代码块"></a>插入连续多行的代码块</h2><p>按一个tab键,然后贴代码，保证每一行代码前都要额外的tab键,同时最前面空一行。<br>比如,我前面插入的连续行代码的实现效果:<br><img src="https://i.imgur.com/Z0BCMhF.png" alt="">      </p><h2 id="设置文字大小和颜色和居中效果"><a href="#设置文字大小和颜色和居中效果" class="headerlink" title="设置文字大小和颜色和居中效果"></a>设置文字大小和颜色和居中效果</h2><p>hello,world!    </p><p><font color="#FF0000"> hello,world! </font>    </p><p><font size="5"> hello,world! </font>     </p><p><font size="5" color="#FF0000">hello,world! </font>    </p><p><center>hello,world!</center><br>上面的效果需要在markdwon中的代码是这样的:   </p><pre><code>hello,world!    &lt;font color=&quot;#FF0000&quot;&gt; hello,world! &lt;/font&gt;    &lt;font size=5&gt; hello,world! &lt;/font&gt;     &lt;font size=5 color=&quot;#FF0000&quot;&gt;hello,world! &lt;/font&gt;    &lt;center&gt;hello,world!&lt;/center&gt;    </code></pre><h2 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h2><p>效果图:   </p><table><thead><tr><th style="text-align:left">左对齐标题</th><th style="text-align:right">右对齐标题</th><th style="text-align:center">居中对齐标题</th></tr></thead><tbody><tr><td style="text-align:left">短文本</td><td style="text-align:right">中等文本</td><td style="text-align:center">稍微长一点的文本</td></tr><tr><td style="text-align:left">稍微长一点的文本</td><td style="text-align:right">短文本</td><td style="text-align:center">中等文本</td></tr></tbody></table><p>markdown代码如下：    </p><pre><code>| 左对齐标题 | 右对齐标题 | 居中对齐标题 || :------| ------: | :------: || 短文本 | 中等文本 | 稍微长一点的文本 || 稍微长一点的文本 | 短文本 | 中等文本 |</code></pre><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/4O4llpT.png&quot; alt=&quot;&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/01/02/hello-world/"/>
    <id>http://yoursite.com/2019/01/02/hello-world/</id>
    <published>2019-01-02T07:34:42.091Z</published>
    <updated>2019-01-02T07:34:42.091Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
